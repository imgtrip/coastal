// Code generated by protoc-gen-go. DO NOT EDIT.
// source: imgtrip.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	imgtrip.proto

It has these top-level messages:
	Album
	Image
	ImageTag
	Post
	ImagesReq
	ImagesRes
	DownloadImageReq
	DownloadImageRes
	UpdateImageVoteReq
	UpdateImageVoteRes
	UpdateImageNameReq
	UpdateImageNameRes
	CreateImageTagReq
	CreateImageTagRes
	DeleteImageTagReq
	DeleteImageTagRes
	UpdateImageTagVoteReq
	UpdateImageTagVoteRes
	AlbumsReq
	AlbumsRes
	AlbumImagesReq
	AlbumImagesRes
	ShowAlbumReq
	ShowAlbumRes
	CreateAlbumReq
	CreateAlbumRes
	UpdateAlbumReq
	UpdateAlbumRes
	CreateAlbumImageReq
	CreateAlbumImageRes
	DeleteAlbumImageReq
	DeleteAlbumImageRes
	DeleteAlbumReq
	DeleteAlbumRes
	UserAlbumsReq
	UserAlbumsRes
	PostsReq
	PostsRes
	ShowPostReq
	ShowPostRes
	CreateZoomLogReq
	CreateZoomLogRes
	CreateDownloadLogReq
	CreateDownloadLogRes
	CreateSearchLogReq
	CreateSearchLogRes
	CreateErrorLogReq
	CreateErrorLogRes
	User
	Comment
	CreateTokenReq
	CreateTokenRes
	AuthTokenReq
	AuthTokenRes
	UpdateTokenReq
	UpdateTokenRes
	CreateJwtReq
	CreateJwtRes
	CreateVerificationEmailReq
	CreateVerificationEmailRes
	CreateUserReq
	CreateUserRes
	UpdateUserReq
	UpdateUserRes
	UpdatePasswordReq
	UpdatePasswordRes
	AuthUserReq
	AuthUserRes
	ShowUserReq
	ShowUserRes
	ImageVote
	ImageVotesReq
	ImageVotesRes
	ScoreLog
	ScoreLogsReq
	ScoreLogsRes
	CommentsReq
	CommentsRes
	CreateCommentReq
	CreateCommentRes
	UpdateCommentReq
	UpdateCommentRes
	CreateCommentHostReq
	CreateCommentHostRes
	CreateFingerprintReq
	CreateFingerprintRes
	UpdateFingerprintReq
	UpdateFingerprintRes
	ReviewCategory
	Review
	ReviewsReq
	ReviewsRes
	UpdateReviewOpinionReq
	UpdateReviewOpinionRes
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ImageSorts int32

const (
	ImageSorts_ID_ASC  ImageSorts = 0
	ImageSorts_ID_DESC ImageSorts = 1
)

var ImageSorts_name = map[int32]string{
	0: "ID_ASC",
	1: "ID_DESC",
}
var ImageSorts_value = map[string]int32{
	"ID_ASC":  0,
	"ID_DESC": 1,
}

func (x ImageSorts) String() string {
	return proto.EnumName(ImageSorts_name, int32(x))
}
func (ImageSorts) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ScoreLogOrders int32

const (
	ScoreLogOrders_NEW ScoreLogOrders = 0
	ScoreLogOrders_OLD ScoreLogOrders = 1
)

var ScoreLogOrders_name = map[int32]string{
	0: "NEW",
	1: "OLD",
}
var ScoreLogOrders_value = map[string]int32{
	"NEW": 0,
	"OLD": 1,
}

func (x ScoreLogOrders) String() string {
	return proto.EnumName(ScoreLogOrders_name, int32(x))
}
func (ScoreLogOrders) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// =====================
// review
// =====================
type ReviewOpinions int32

const (
	ReviewOpinions_UNKNOWN  ReviewOpinions = 0
	ReviewOpinions_AGREE    ReviewOpinions = 1
	ReviewOpinions_DISAGREE ReviewOpinions = 2
)

var ReviewOpinions_name = map[int32]string{
	0: "UNKNOWN",
	1: "AGREE",
	2: "DISAGREE",
}
var ReviewOpinions_value = map[string]int32{
	"UNKNOWN":  0,
	"AGREE":    1,
	"DISAGREE": 2,
}

func (x ReviewOpinions) String() string {
	return proto.EnumName(ReviewOpinions_name, int32(x))
}
func (ReviewOpinions) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ReviewsOrder int32

const (
	ReviewsOrder_UPDATE           ReviewsOrder = 0
	ReviewsOrder_CREATE           ReviewsOrder = 1
	ReviewsOrder_ENDING           ReviewsOrder = 2
	ReviewsOrder_CREATOR_HISTORY  ReviewsOrder = 3
	ReviewsOrder_REVIEWER_HISTORY ReviewsOrder = 4
	ReviewsOrder_ENDED            ReviewsOrder = 5
)

var ReviewsOrder_name = map[int32]string{
	0: "UPDATE",
	1: "CREATE",
	2: "ENDING",
	3: "CREATOR_HISTORY",
	4: "REVIEWER_HISTORY",
	5: "ENDED",
}
var ReviewsOrder_value = map[string]int32{
	"UPDATE":           0,
	"CREATE":           1,
	"ENDING":           2,
	"CREATOR_HISTORY":  3,
	"REVIEWER_HISTORY": 4,
	"ENDED":            5,
}

func (x ReviewsOrder) String() string {
	return proto.EnumName(ReviewsOrder_name, int32(x))
}
func (ReviewsOrder) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Album struct {
	Id            uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title         string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	UserId        uint64 `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	CreatedAt     string `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Comments      uint64 `protobuf:"varint,5,opt,name=comments" json:"comments,omitempty"`
	Views         uint64 `protobuf:"varint,6,opt,name=views" json:"views,omitempty"`
	Cover         string `protobuf:"bytes,7,opt,name=cover" json:"cover,omitempty"`
	Amounts       uint64 `protobuf:"varint,8,opt,name=amounts" json:"amounts,omitempty"`
	CommentHostId uint64 `protobuf:"varint,9,opt,name=comment_host_id,json=commentHostId" json:"comment_host_id,omitempty"`
	Description   string `protobuf:"bytes,10,opt,name=description" json:"description,omitempty"`
}

func (m *Album) Reset()                    { *m = Album{} }
func (m *Album) String() string            { return proto.CompactTextString(m) }
func (*Album) ProtoMessage()               {}
func (*Album) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Album) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Album) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Album) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Album) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Album) GetComments() uint64 {
	if m != nil {
		return m.Comments
	}
	return 0
}

func (m *Album) GetViews() uint64 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *Album) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Album) GetAmounts() uint64 {
	if m != nil {
		return m.Amounts
	}
	return 0
}

func (m *Album) GetCommentHostId() uint64 {
	if m != nil {
		return m.CommentHostId
	}
	return 0
}

func (m *Album) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Image struct {
	Id        uint64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Src       string      `protobuf:"bytes,3,opt,name=src" json:"src,omitempty"`
	Favorited bool        `protobuf:"varint,4,opt,name=favorited" json:"favorited,omitempty"`
	VoteUp    uint64      `protobuf:"varint,5,opt,name=vote_up,json=voteUp" json:"vote_up,omitempty"`
	VoteDown  uint64      `protobuf:"varint,6,opt,name=vote_down,json=voteDown" json:"vote_down,omitempty"`
	Tags      []*ImageTag `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Image) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Image) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Image) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *Image) GetFavorited() bool {
	if m != nil {
		return m.Favorited
	}
	return false
}

func (m *Image) GetVoteUp() uint64 {
	if m != nil {
		return m.VoteUp
	}
	return 0
}

func (m *Image) GetVoteDown() uint64 {
	if m != nil {
		return m.VoteDown
	}
	return 0
}

func (m *Image) GetTags() []*ImageTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ImageTag struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	VoteUp     uint64 `protobuf:"varint,3,opt,name=vote_up,json=voteUp" json:"vote_up,omitempty"`
	IsVoted    bool   `protobuf:"varint,4,opt,name=is_voted,json=isVoted" json:"is_voted,omitempty"`
	ImageTagId uint64 `protobuf:"varint,5,opt,name=image_tag_id,json=imageTagId" json:"image_tag_id,omitempty"`
}

func (m *ImageTag) Reset()                    { *m = ImageTag{} }
func (m *ImageTag) String() string            { return proto.CompactTextString(m) }
func (*ImageTag) ProtoMessage()               {}
func (*ImageTag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ImageTag) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ImageTag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ImageTag) GetVoteUp() uint64 {
	if m != nil {
		return m.VoteUp
	}
	return 0
}

func (m *ImageTag) GetIsVoted() bool {
	if m != nil {
		return m.IsVoted
	}
	return false
}

func (m *ImageTag) GetImageTagId() uint64 {
	if m != nil {
		return m.ImageTagId
	}
	return 0
}

type Post struct {
	Id            uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title         string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Body          string `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	UserId        uint64 `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	CreatedAt     string `protobuf:"bytes,5,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Comments      uint64 `protobuf:"varint,6,opt,name=comments" json:"comments,omitempty"`
	Views         uint64 `protobuf:"varint,7,opt,name=views" json:"views,omitempty"`
	Cover         string `protobuf:"bytes,8,opt,name=cover" json:"cover,omitempty"`
	CommentHostId uint64 `protobuf:"varint,9,opt,name=comment_host_id,json=commentHostId" json:"comment_host_id,omitempty"`
}

func (m *Post) Reset()                    { *m = Post{} }
func (m *Post) String() string            { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()               {}
func (*Post) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Post) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Post) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Post) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Post) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Post) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Post) GetComments() uint64 {
	if m != nil {
		return m.Comments
	}
	return 0
}

func (m *Post) GetViews() uint64 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *Post) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Post) GetCommentHostId() uint64 {
	if m != nil {
		return m.CommentHostId
	}
	return 0
}

// images
type ImagesReq struct {
	Start  uint64     `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	Limit  uint64     `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Sort   ImageSorts `protobuf:"varint,3,opt,name=sort,enum=pb.ImageSorts" json:"sort,omitempty"`
	Random bool       `protobuf:"varint,4,opt,name=random" json:"random,omitempty"`
	Total  bool       `protobuf:"varint,5,opt,name=total" json:"total,omitempty"`
}

func (m *ImagesReq) Reset()                    { *m = ImagesReq{} }
func (m *ImagesReq) String() string            { return proto.CompactTextString(m) }
func (*ImagesReq) ProtoMessage()               {}
func (*ImagesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ImagesReq) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ImagesReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ImagesReq) GetSort() ImageSorts {
	if m != nil {
		return m.Sort
	}
	return ImageSorts_ID_ASC
}

func (m *ImagesReq) GetRandom() bool {
	if m != nil {
		return m.Random
	}
	return false
}

func (m *ImagesReq) GetTotal() bool {
	if m != nil {
		return m.Total
	}
	return false
}

type ImagesRes struct {
	Items []*Image `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Total uint64   `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *ImagesRes) Reset()                    { *m = ImagesRes{} }
func (m *ImagesRes) String() string            { return proto.CompactTextString(m) }
func (*ImagesRes) ProtoMessage()               {}
func (*ImagesRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ImagesRes) GetItems() []*Image {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ImagesRes) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

// download images
type DownloadImageReq struct {
	ImageId uint64 `protobuf:"varint,1,opt,name=image_id,json=imageId" json:"image_id,omitempty"`
}

func (m *DownloadImageReq) Reset()                    { *m = DownloadImageReq{} }
func (m *DownloadImageReq) String() string            { return proto.CompactTextString(m) }
func (*DownloadImageReq) ProtoMessage()               {}
func (*DownloadImageReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DownloadImageReq) GetImageId() uint64 {
	if m != nil {
		return m.ImageId
	}
	return 0
}

type DownloadImageRes struct {
	Status bool `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *DownloadImageRes) Reset()                    { *m = DownloadImageRes{} }
func (m *DownloadImageRes) String() string            { return proto.CompactTextString(m) }
func (*DownloadImageRes) ProtoMessage()               {}
func (*DownloadImageRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DownloadImageRes) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type UpdateImageVoteReq struct {
	// @inject_tag: form:"imageId" binding:"required" validate:"required"
	ImageId uint64 `protobuf:"varint,1,opt,name=image_id,json=imageId" json:"image_id,omitempty" form:"imageId" binding:"required" validate:"required"`
	// @inject_tag: form:"vote"
	Vote int64 `protobuf:"varint,2,opt,name=vote" json:"vote,omitempty" form:"vote"`
}

func (m *UpdateImageVoteReq) Reset()                    { *m = UpdateImageVoteReq{} }
func (m *UpdateImageVoteReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateImageVoteReq) ProtoMessage()               {}
func (*UpdateImageVoteReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateImageVoteReq) GetImageId() uint64 {
	if m != nil {
		return m.ImageId
	}
	return 0
}

func (m *UpdateImageVoteReq) GetVote() int64 {
	if m != nil {
		return m.Vote
	}
	return 0
}

type UpdateImageVoteRes struct {
}

func (m *UpdateImageVoteRes) Reset()                    { *m = UpdateImageVoteRes{} }
func (m *UpdateImageVoteRes) String() string            { return proto.CompactTextString(m) }
func (*UpdateImageVoteRes) ProtoMessage()               {}
func (*UpdateImageVoteRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type UpdateImageNameReq struct {
	// @inject_tag: form:"imageId" binding:"required" validate:"required"
	ImageId uint64 `protobuf:"varint,1,opt,name=image_id,json=imageId" json:"image_id,omitempty" form:"imageId" binding:"required" validate:"required"`
	// @inject_tag: form:"name" binding:"required" validate:"required"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" form:"name" binding:"required" validate:"required"`
}

func (m *UpdateImageNameReq) Reset()                    { *m = UpdateImageNameReq{} }
func (m *UpdateImageNameReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateImageNameReq) ProtoMessage()               {}
func (*UpdateImageNameReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateImageNameReq) GetImageId() uint64 {
	if m != nil {
		return m.ImageId
	}
	return 0
}

func (m *UpdateImageNameReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateImageNameRes struct {
}

func (m *UpdateImageNameRes) Reset()                    { *m = UpdateImageNameRes{} }
func (m *UpdateImageNameRes) String() string            { return proto.CompactTextString(m) }
func (*UpdateImageNameRes) ProtoMessage()               {}
func (*UpdateImageNameRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type CreateImageTagReq struct {
	// @inject_tag: form:"imageId" binding:"required" validate:"required"
	ImageId uint64 `protobuf:"varint,1,opt,name=image_id,json=imageId" json:"image_id,omitempty" form:"imageId" binding:"required" validate:"required"`
	// @inject_tag: form:"tag" binding:"required" validate:"required"
	Tag string `protobuf:"bytes,2,opt,name=tag" json:"tag,omitempty" form:"tag" binding:"required" validate:"required"`
}

func (m *CreateImageTagReq) Reset()                    { *m = CreateImageTagReq{} }
func (m *CreateImageTagReq) String() string            { return proto.CompactTextString(m) }
func (*CreateImageTagReq) ProtoMessage()               {}
func (*CreateImageTagReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CreateImageTagReq) GetImageId() uint64 {
	if m != nil {
		return m.ImageId
	}
	return 0
}

func (m *CreateImageTagReq) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type CreateImageTagRes struct {
}

func (m *CreateImageTagRes) Reset()                    { *m = CreateImageTagRes{} }
func (m *CreateImageTagRes) String() string            { return proto.CompactTextString(m) }
func (*CreateImageTagRes) ProtoMessage()               {}
func (*CreateImageTagRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type DeleteImageTagReq struct {
	// @inject_tag: form:"imageId" binding:"required" validate:"required"
	ImageId uint64 `protobuf:"varint,1,opt,name=image_id,json=imageId" json:"image_id,omitempty" form:"imageId" binding:"required" validate:"required"`
	// @inject_tag: form:"tagId" binding:"required" validate:"required"
	TagId uint64 `protobuf:"varint,2,opt,name=tag_id,json=tagId" json:"tag_id,omitempty" form:"tagId" binding:"required" validate:"required"`
}

func (m *DeleteImageTagReq) Reset()                    { *m = DeleteImageTagReq{} }
func (m *DeleteImageTagReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteImageTagReq) ProtoMessage()               {}
func (*DeleteImageTagReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DeleteImageTagReq) GetImageId() uint64 {
	if m != nil {
		return m.ImageId
	}
	return 0
}

func (m *DeleteImageTagReq) GetTagId() uint64 {
	if m != nil {
		return m.TagId
	}
	return 0
}

type DeleteImageTagRes struct {
}

func (m *DeleteImageTagRes) Reset()                    { *m = DeleteImageTagRes{} }
func (m *DeleteImageTagRes) String() string            { return proto.CompactTextString(m) }
func (*DeleteImageTagRes) ProtoMessage()               {}
func (*DeleteImageTagRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type UpdateImageTagVoteReq struct {
	// @inject_tag: form:"imageId" binding:"required" validate:"required"
	ImageId uint64 `protobuf:"varint,1,opt,name=image_id,json=imageId" json:"image_id,omitempty" form:"imageId" binding:"required" validate:"required"`
	// @inject_tag: form:"vote"
	Vote uint64 `protobuf:"varint,2,opt,name=vote" json:"vote,omitempty" form:"vote"`
	// @inject_tag: form:"tagId" binding:"required" validate:"required"
	TagId uint64 `protobuf:"varint,3,opt,name=tag_id,json=tagId" json:"tag_id,omitempty" form:"tagId" binding:"required" validate:"required"`
}

func (m *UpdateImageTagVoteReq) Reset()                    { *m = UpdateImageTagVoteReq{} }
func (m *UpdateImageTagVoteReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateImageTagVoteReq) ProtoMessage()               {}
func (*UpdateImageTagVoteReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UpdateImageTagVoteReq) GetImageId() uint64 {
	if m != nil {
		return m.ImageId
	}
	return 0
}

func (m *UpdateImageTagVoteReq) GetVote() uint64 {
	if m != nil {
		return m.Vote
	}
	return 0
}

func (m *UpdateImageTagVoteReq) GetTagId() uint64 {
	if m != nil {
		return m.TagId
	}
	return 0
}

type UpdateImageTagVoteRes struct {
}

func (m *UpdateImageTagVoteRes) Reset()                    { *m = UpdateImageTagVoteRes{} }
func (m *UpdateImageTagVoteRes) String() string            { return proto.CompactTextString(m) }
func (*UpdateImageTagVoteRes) ProtoMessage()               {}
func (*UpdateImageTagVoteRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

// albums
type AlbumsReq struct {
	// @inject_tag: form:"start"
	Start uint64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty" form:"start"`
	// @inject_tag: form:"limit"
	Limit uint64 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty" form:"limit"`
	// @inject_tag: form:"order"
	Order uint64 `protobuf:"varint,3,opt,name=order" json:"order,omitempty" form:"order"`
	// @inject_tag: form:"total"
	Total bool `protobuf:"varint,5,opt,name=total" json:"total,omitempty" form:"total"`
}

func (m *AlbumsReq) Reset()                    { *m = AlbumsReq{} }
func (m *AlbumsReq) String() string            { return proto.CompactTextString(m) }
func (*AlbumsReq) ProtoMessage()               {}
func (*AlbumsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *AlbumsReq) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *AlbumsReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AlbumsReq) GetOrder() uint64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *AlbumsReq) GetTotal() bool {
	if m != nil {
		return m.Total
	}
	return false
}

type AlbumsRes struct {
	Items []*Album `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Total uint64   `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *AlbumsRes) Reset()                    { *m = AlbumsRes{} }
func (m *AlbumsRes) String() string            { return proto.CompactTextString(m) }
func (*AlbumsRes) ProtoMessage()               {}
func (*AlbumsRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *AlbumsRes) GetItems() []*Album {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *AlbumsRes) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

// albums images
type AlbumImagesReq struct {
	// @inject_tag: form:"start"
	Start uint64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty" form:"start"`
	// @inject_tag: form:"limit"
	Limit int64 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty" form:"limit"`
	// @inject_tag: form:"order"
	Order uint64 `protobuf:"varint,3,opt,name=order" json:"order,omitempty" form:"order"`
	// @inject_tag: form:"albumId" binding:"required" validate:"required"
	AlbumId uint64 `protobuf:"varint,4,opt,name=album_id,json=albumId" json:"album_id,omitempty" form:"albumId" binding:"required" validate:"required"`
	// @inject_tag: form:"total"
	Total bool `protobuf:"varint,5,opt,name=total" json:"total,omitempty" form:"total"`
}

func (m *AlbumImagesReq) Reset()                    { *m = AlbumImagesReq{} }
func (m *AlbumImagesReq) String() string            { return proto.CompactTextString(m) }
func (*AlbumImagesReq) ProtoMessage()               {}
func (*AlbumImagesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *AlbumImagesReq) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *AlbumImagesReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AlbumImagesReq) GetOrder() uint64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *AlbumImagesReq) GetAlbumId() uint64 {
	if m != nil {
		return m.AlbumId
	}
	return 0
}

func (m *AlbumImagesReq) GetTotal() bool {
	if m != nil {
		return m.Total
	}
	return false
}

type AlbumImagesRes struct {
	Items []*Image `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Total uint64   `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *AlbumImagesRes) Reset()                    { *m = AlbumImagesRes{} }
func (m *AlbumImagesRes) String() string            { return proto.CompactTextString(m) }
func (*AlbumImagesRes) ProtoMessage()               {}
func (*AlbumImagesRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *AlbumImagesRes) GetItems() []*Image {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *AlbumImagesRes) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

// show album
type ShowAlbumReq struct {
	// @inject_tag: form:"id" binding:"required" validate:"required"
	Id uint64 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" form:"id" binding:"required" validate:"required"`
}

func (m *ShowAlbumReq) Reset()                    { *m = ShowAlbumReq{} }
func (m *ShowAlbumReq) String() string            { return proto.CompactTextString(m) }
func (*ShowAlbumReq) ProtoMessage()               {}
func (*ShowAlbumReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ShowAlbumReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ShowAlbumRes struct {
	Album *Album `protobuf:"bytes,1,opt,name=album" json:"album,omitempty"`
}

func (m *ShowAlbumRes) Reset()                    { *m = ShowAlbumRes{} }
func (m *ShowAlbumRes) String() string            { return proto.CompactTextString(m) }
func (*ShowAlbumRes) ProtoMessage()               {}
func (*ShowAlbumRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ShowAlbumRes) GetAlbum() *Album {
	if m != nil {
		return m.Album
	}
	return nil
}

// create albums
type CreateAlbumReq struct {
	// @inject_tag: form:"title" binding:"required" validate:"required"
	Title  string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty" form:"title" binding:"required" validate:"required"`
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *CreateAlbumReq) Reset()                    { *m = CreateAlbumReq{} }
func (m *CreateAlbumReq) String() string            { return proto.CompactTextString(m) }
func (*CreateAlbumReq) ProtoMessage()               {}
func (*CreateAlbumReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CreateAlbumReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateAlbumReq) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CreateAlbumRes struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateAlbumRes) Reset()                    { *m = CreateAlbumRes{} }
func (m *CreateAlbumRes) String() string            { return proto.CompactTextString(m) }
func (*CreateAlbumRes) ProtoMessage()               {}
func (*CreateAlbumRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CreateAlbumRes) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// update album
type UpdateAlbumReq struct {
	// @inject_tag: form:"id" binding:"required" validate:"required"
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty" form:"id" binding:"required" validate:"required"`
	// @inject_tag: form:"title"
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty" form:"title"`
	// @inject_tag: form:"comments"
	Comments uint64 `protobuf:"varint,3,opt,name=comments" json:"comments,omitempty" form:"comments"`
	// @inject_tag: form:"views"
	Views uint64 `protobuf:"varint,4,opt,name=views" json:"views,omitempty" form:"views"`
	// @inject_tag: form:"cover"
	Cover string `protobuf:"bytes,5,opt,name=cover" json:"cover,omitempty" form:"cover"`
	// @inject_tag: form:"description"
	Description string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty" form:"description"`
}

func (m *UpdateAlbumReq) Reset()                    { *m = UpdateAlbumReq{} }
func (m *UpdateAlbumReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateAlbumReq) ProtoMessage()               {}
func (*UpdateAlbumReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *UpdateAlbumReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateAlbumReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateAlbumReq) GetComments() uint64 {
	if m != nil {
		return m.Comments
	}
	return 0
}

func (m *UpdateAlbumReq) GetViews() uint64 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *UpdateAlbumReq) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *UpdateAlbumReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type UpdateAlbumRes struct {
}

func (m *UpdateAlbumRes) Reset()                    { *m = UpdateAlbumRes{} }
func (m *UpdateAlbumRes) String() string            { return proto.CompactTextString(m) }
func (*UpdateAlbumRes) ProtoMessage()               {}
func (*UpdateAlbumRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type CreateAlbumImageReq struct {
	// @inject_tag: form:"albumId" binding:"required" validate:"required"
	AlbumId uint64 `protobuf:"varint,1,opt,name=album_id,json=albumId" json:"album_id,omitempty" form:"albumId" binding:"required" validate:"required"`
	// @inject_tag: form:"imageId" binding:"required" validate:"required"
	ImageId uint64 `protobuf:"varint,2,opt,name=image_id,json=imageId" json:"image_id,omitempty" form:"imageId" binding:"required" validate:"required"`
}

func (m *CreateAlbumImageReq) Reset()                    { *m = CreateAlbumImageReq{} }
func (m *CreateAlbumImageReq) String() string            { return proto.CompactTextString(m) }
func (*CreateAlbumImageReq) ProtoMessage()               {}
func (*CreateAlbumImageReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CreateAlbumImageReq) GetAlbumId() uint64 {
	if m != nil {
		return m.AlbumId
	}
	return 0
}

func (m *CreateAlbumImageReq) GetImageId() uint64 {
	if m != nil {
		return m.ImageId
	}
	return 0
}

type CreateAlbumImageRes struct {
}

func (m *CreateAlbumImageRes) Reset()                    { *m = CreateAlbumImageRes{} }
func (m *CreateAlbumImageRes) String() string            { return proto.CompactTextString(m) }
func (*CreateAlbumImageRes) ProtoMessage()               {}
func (*CreateAlbumImageRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type DeleteAlbumImageReq struct {
	// @inject_tag: form:"albumId" binding:"required" validate:"required"
	AlbumId uint64 `protobuf:"varint,1,opt,name=album_id,json=albumId" json:"album_id,omitempty" form:"albumId" binding:"required" validate:"required"`
	// @inject_tag: form:"imageId" binding:"required" validate:"required"
	ImageId uint64 `protobuf:"varint,2,opt,name=image_id,json=imageId" json:"image_id,omitempty" form:"imageId" binding:"required" validate:"required"`
}

func (m *DeleteAlbumImageReq) Reset()                    { *m = DeleteAlbumImageReq{} }
func (m *DeleteAlbumImageReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteAlbumImageReq) ProtoMessage()               {}
func (*DeleteAlbumImageReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *DeleteAlbumImageReq) GetAlbumId() uint64 {
	if m != nil {
		return m.AlbumId
	}
	return 0
}

func (m *DeleteAlbumImageReq) GetImageId() uint64 {
	if m != nil {
		return m.ImageId
	}
	return 0
}

type DeleteAlbumImageRes struct {
}

func (m *DeleteAlbumImageRes) Reset()                    { *m = DeleteAlbumImageRes{} }
func (m *DeleteAlbumImageRes) String() string            { return proto.CompactTextString(m) }
func (*DeleteAlbumImageRes) ProtoMessage()               {}
func (*DeleteAlbumImageRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

// delete album
type DeleteAlbumReq struct {
	// @inject_tag: form:"id" binding:"required" validate:"required"
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty" form:"id" binding:"required" validate:"required"`
}

func (m *DeleteAlbumReq) Reset()                    { *m = DeleteAlbumReq{} }
func (m *DeleteAlbumReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteAlbumReq) ProtoMessage()               {}
func (*DeleteAlbumReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *DeleteAlbumReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteAlbumRes struct {
}

func (m *DeleteAlbumRes) Reset()                    { *m = DeleteAlbumRes{} }
func (m *DeleteAlbumRes) String() string            { return proto.CompactTextString(m) }
func (*DeleteAlbumRes) ProtoMessage()               {}
func (*DeleteAlbumRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

// user albums
type UserAlbumsReq struct {
	// @inject_tag: form:"userId" binding:"required" validate:"required"
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty" form:"userId" binding:"required" validate:"required"`
}

func (m *UserAlbumsReq) Reset()                    { *m = UserAlbumsReq{} }
func (m *UserAlbumsReq) String() string            { return proto.CompactTextString(m) }
func (*UserAlbumsReq) ProtoMessage()               {}
func (*UserAlbumsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *UserAlbumsReq) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type UserAlbumsRes struct {
	Items []*Album `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *UserAlbumsRes) Reset()                    { *m = UserAlbumsRes{} }
func (m *UserAlbumsRes) String() string            { return proto.CompactTextString(m) }
func (*UserAlbumsRes) ProtoMessage()               {}
func (*UserAlbumsRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *UserAlbumsRes) GetItems() []*Album {
	if m != nil {
		return m.Items
	}
	return nil
}

// POST
type PostsReq struct {
	// @inject_tag: form:"start"
	Start uint64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty" form:"start"`
	// @inject_tag: form:"limit"
	Limit uint64 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty" form:"limit"`
}

func (m *PostsReq) Reset()                    { *m = PostsReq{} }
func (m *PostsReq) String() string            { return proto.CompactTextString(m) }
func (*PostsReq) ProtoMessage()               {}
func (*PostsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *PostsReq) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *PostsReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type PostsRes struct {
	Items []*Post `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *PostsRes) Reset()                    { *m = PostsRes{} }
func (m *PostsRes) String() string            { return proto.CompactTextString(m) }
func (*PostsRes) ProtoMessage()               {}
func (*PostsRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *PostsRes) GetItems() []*Post {
	if m != nil {
		return m.Items
	}
	return nil
}

type ShowPostReq struct {
	// @inject_tag: form:"id" binding:"required" validate:"required"
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty" form:"id" binding:"required" validate:"required"`
}

func (m *ShowPostReq) Reset()                    { *m = ShowPostReq{} }
func (m *ShowPostReq) String() string            { return proto.CompactTextString(m) }
func (*ShowPostReq) ProtoMessage()               {}
func (*ShowPostReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ShowPostReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ShowPostRes struct {
	Post *Post `protobuf:"bytes,1,opt,name=post" json:"post,omitempty"`
}

func (m *ShowPostRes) Reset()                    { *m = ShowPostRes{} }
func (m *ShowPostRes) String() string            { return proto.CompactTextString(m) }
func (*ShowPostRes) ProtoMessage()               {}
func (*ShowPostRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ShowPostRes) GetPost() *Post {
	if m != nil {
		return m.Post
	}
	return nil
}

type CreateZoomLogReq struct {
	// @inject_tag: form:"fingerprint" binding:"required"
	Fingerprint string `protobuf:"bytes,1,opt,name=fingerprint" json:"fingerprint,omitempty" form:"fingerprint" binding:"required"`
	// @inject_tag: form:"imageId" binding:"required"
	ImageId uint64 `protobuf:"varint,2,opt,name=image_id,json=imageId" json:"image_id,omitempty" form:"imageId" binding:"required"`
}

func (m *CreateZoomLogReq) Reset()                    { *m = CreateZoomLogReq{} }
func (m *CreateZoomLogReq) String() string            { return proto.CompactTextString(m) }
func (*CreateZoomLogReq) ProtoMessage()               {}
func (*CreateZoomLogReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *CreateZoomLogReq) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *CreateZoomLogReq) GetImageId() uint64 {
	if m != nil {
		return m.ImageId
	}
	return 0
}

type CreateZoomLogRes struct {
}

func (m *CreateZoomLogRes) Reset()                    { *m = CreateZoomLogRes{} }
func (m *CreateZoomLogRes) String() string            { return proto.CompactTextString(m) }
func (*CreateZoomLogRes) ProtoMessage()               {}
func (*CreateZoomLogRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

type CreateDownloadLogReq struct {
	// @inject_tag: form:"fingerprint" binding:"required"
	Fingerprint string `protobuf:"bytes,1,opt,name=fingerprint" json:"fingerprint,omitempty" form:"fingerprint" binding:"required"`
	// @inject_tag: form:"imageId" binding:"required"
	ImageId uint64 `protobuf:"varint,2,opt,name=image_id,json=imageId" json:"image_id,omitempty" form:"imageId" binding:"required"`
}

func (m *CreateDownloadLogReq) Reset()                    { *m = CreateDownloadLogReq{} }
func (m *CreateDownloadLogReq) String() string            { return proto.CompactTextString(m) }
func (*CreateDownloadLogReq) ProtoMessage()               {}
func (*CreateDownloadLogReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *CreateDownloadLogReq) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *CreateDownloadLogReq) GetImageId() uint64 {
	if m != nil {
		return m.ImageId
	}
	return 0
}

type CreateDownloadLogRes struct {
}

func (m *CreateDownloadLogRes) Reset()                    { *m = CreateDownloadLogRes{} }
func (m *CreateDownloadLogRes) String() string            { return proto.CompactTextString(m) }
func (*CreateDownloadLogRes) ProtoMessage()               {}
func (*CreateDownloadLogRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

type CreateSearchLogReq struct {
	// @inject_tag: form:"fingerprint" binding:"required"
	Fingerprint string `protobuf:"bytes,1,opt,name=fingerprint" json:"fingerprint,omitempty" form:"fingerprint" binding:"required"`
	// @inject_tag: form:"keyword" binding:"required"
	Keyword uint64 `protobuf:"varint,2,opt,name=keyword" json:"keyword,omitempty" form:"keyword" binding:"required"`
}

func (m *CreateSearchLogReq) Reset()                    { *m = CreateSearchLogReq{} }
func (m *CreateSearchLogReq) String() string            { return proto.CompactTextString(m) }
func (*CreateSearchLogReq) ProtoMessage()               {}
func (*CreateSearchLogReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *CreateSearchLogReq) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *CreateSearchLogReq) GetKeyword() uint64 {
	if m != nil {
		return m.Keyword
	}
	return 0
}

type CreateSearchLogRes struct {
}

func (m *CreateSearchLogRes) Reset()                    { *m = CreateSearchLogRes{} }
func (m *CreateSearchLogRes) String() string            { return proto.CompactTextString(m) }
func (*CreateSearchLogRes) ProtoMessage()               {}
func (*CreateSearchLogRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

type CreateErrorLogReq struct {
	// @inject_tag: form:"code" binding:"required"
	Code uint64 `protobuf:"varint,1,opt,name=code" json:"code,omitempty" form:"code" binding:"required"`
	// @inject_tag: form:"message" binding:"required"
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty" form:"message" binding:"required"`
	// @inject_tag: form:"url" binding:"required"
	Url string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty" form:"url" binding:"required"`
	// @inject_tag: form:"payload" binding:"required"
	Payload string `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty" form:"payload" binding:"required"`
	// node or browser user-agent
	// @inject_tag: form:"environment" binding:"required"
	Environment string `protobuf:"bytes,5,opt,name=environment" json:"environment,omitempty" form:"environment" binding:"required"`
	// @inject_tag: form:"header" binding:"required"
	Header string `protobuf:"bytes,6,opt,name=header" json:"header,omitempty" form:"header" binding:"required"`
	// @inject_tag: form:"cookie" binding:"required"
	Cookie string `protobuf:"bytes,7,opt,name=cookie" json:"cookie,omitempty" form:"cookie" binding:"required"`
}

func (m *CreateErrorLogReq) Reset()                    { *m = CreateErrorLogReq{} }
func (m *CreateErrorLogReq) String() string            { return proto.CompactTextString(m) }
func (*CreateErrorLogReq) ProtoMessage()               {}
func (*CreateErrorLogReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *CreateErrorLogReq) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateErrorLogReq) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateErrorLogReq) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CreateErrorLogReq) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *CreateErrorLogReq) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *CreateErrorLogReq) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *CreateErrorLogReq) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

type CreateErrorLogRes struct {
}

func (m *CreateErrorLogRes) Reset()                    { *m = CreateErrorLogRes{} }
func (m *CreateErrorLogRes) String() string            { return proto.CompactTextString(m) }
func (*CreateErrorLogRes) ProtoMessage()               {}
func (*CreateErrorLogRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

type User struct {
	Id   uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	//    string email = 3;
	AlbumId                 uint64 `protobuf:"varint,4,opt,name=album_id,json=albumId" json:"album_id,omitempty"`
	Avatar                  string `protobuf:"bytes,5,opt,name=avatar" json:"avatar,omitempty"`
	CreatedAt               string `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Score                   uint64 `protobuf:"varint,7,opt,name=score" json:"score,omitempty"`
	DailyFreeDownloadNumber uint64 `protobuf:"varint,8,opt,name=daily_free_download_number,json=dailyFreeDownloadNumber" json:"daily_free_download_number,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *User) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetAlbumId() uint64 {
	if m != nil {
		return m.AlbumId
	}
	return 0
}

func (m *User) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *User) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *User) GetScore() uint64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *User) GetDailyFreeDownloadNumber() uint64 {
	if m != nil {
		return m.DailyFreeDownloadNumber
	}
	return 0
}

type Comment struct {
	Id            uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CommentHostId uint64 `protobuf:"varint,2,opt,name=comment_host_id,json=commentHostId" json:"comment_host_id,omitempty"`
	Content       string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	CreatedAt     string `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	User          *User  `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (m *Comment) String() string            { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *Comment) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Comment) GetCommentHostId() uint64 {
	if m != nil {
		return m.CommentHostId
	}
	return 0
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Comment) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Comment) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

// token
type CreateTokenReq struct {
	// @inject_tag: form:"userId"
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty" form:"userId"`
}

func (m *CreateTokenReq) Reset()                    { *m = CreateTokenReq{} }
func (m *CreateTokenReq) String() string            { return proto.CompactTextString(m) }
func (*CreateTokenReq) ProtoMessage()               {}
func (*CreateTokenReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *CreateTokenReq) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CreateTokenRes struct {
	Token  string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *CreateTokenRes) Reset()                    { *m = CreateTokenRes{} }
func (m *CreateTokenRes) String() string            { return proto.CompactTextString(m) }
func (*CreateTokenRes) ProtoMessage()               {}
func (*CreateTokenRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *CreateTokenRes) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CreateTokenRes) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type AuthTokenReq struct {
	// @inject_tag: form:"token" binding:"required" validate:"required,len=10"
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty" form:"token" binding:"required" validate:"required,len=10"`
}

func (m *AuthTokenReq) Reset()                    { *m = AuthTokenReq{} }
func (m *AuthTokenReq) String() string            { return proto.CompactTextString(m) }
func (*AuthTokenReq) ProtoMessage()               {}
func (*AuthTokenReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *AuthTokenReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type AuthTokenRes struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *AuthTokenRes) Reset()                    { *m = AuthTokenRes{} }
func (m *AuthTokenRes) String() string            { return proto.CompactTextString(m) }
func (*AuthTokenRes) ProtoMessage()               {}
func (*AuthTokenRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *AuthTokenRes) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UpdateTokenReq struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *UpdateTokenReq) Reset()                    { *m = UpdateTokenReq{} }
func (m *UpdateTokenReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateTokenReq) ProtoMessage()               {}
func (*UpdateTokenReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *UpdateTokenReq) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type UpdateTokenRes struct {
}

func (m *UpdateTokenRes) Reset()                    { *m = UpdateTokenRes{} }
func (m *UpdateTokenRes) String() string            { return proto.CompactTextString(m) }
func (*UpdateTokenRes) ProtoMessage()               {}
func (*UpdateTokenRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

type CreateJwtReq struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateJwtReq) Reset()                    { *m = CreateJwtReq{} }
func (m *CreateJwtReq) String() string            { return proto.CompactTextString(m) }
func (*CreateJwtReq) ProtoMessage()               {}
func (*CreateJwtReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *CreateJwtReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CreateJwtRes struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *CreateJwtRes) Reset()                    { *m = CreateJwtRes{} }
func (m *CreateJwtRes) String() string            { return proto.CompactTextString(m) }
func (*CreateJwtRes) ProtoMessage()               {}
func (*CreateJwtRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *CreateJwtRes) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type CreateVerificationEmailReq struct {
	// @inject_tag: form:"email" binding:"required" validate:"required,email"
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty" form:"email" binding:"required" validate:"required,email"`
}

func (m *CreateVerificationEmailReq) Reset()                    { *m = CreateVerificationEmailReq{} }
func (m *CreateVerificationEmailReq) String() string            { return proto.CompactTextString(m) }
func (*CreateVerificationEmailReq) ProtoMessage()               {}
func (*CreateVerificationEmailReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *CreateVerificationEmailReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type CreateVerificationEmailRes struct {
}

func (m *CreateVerificationEmailRes) Reset()                    { *m = CreateVerificationEmailRes{} }
func (m *CreateVerificationEmailRes) String() string            { return proto.CompactTextString(m) }
func (*CreateVerificationEmailRes) ProtoMessage()               {}
func (*CreateVerificationEmailRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

// =====================
// user
// =====================
type CreateUserReq struct {
	// @inject_tag: form:"name" binding:"required" validate:"required"
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" form:"name" binding:"required" validate:"required"`
	// @inject_tag: form:"email" binding:"required" validate:"required,email"
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty" form:"email" binding:"required" validate:"required,email"`
	// @inject_tag: form:"password" binding:"required" validate:"required,min=6,max=32"
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty" form:"password" binding:"required" validate:"required,min=6,max=32"`
	// @inject_tag: form:"verification_code" binding:"required" validate:"required,len=6"
	VerificationCode string `protobuf:"bytes,4,opt,name=verification_code,json=verificationCode" json:"verification_code,omitempty" form:"verification_code" binding:"required" validate:"required,len=6"`
	// @inject_tag: form:"referrer_email"
	ReferrerEmail string `protobuf:"bytes,5,opt,name=referrer_email,json=referrerEmail" json:"referrer_email,omitempty" form:"referrer_email"`
}

func (m *CreateUserReq) Reset()                    { *m = CreateUserReq{} }
func (m *CreateUserReq) String() string            { return proto.CompactTextString(m) }
func (*CreateUserReq) ProtoMessage()               {}
func (*CreateUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *CreateUserReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateUserReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateUserReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateUserReq) GetVerificationCode() string {
	if m != nil {
		return m.VerificationCode
	}
	return ""
}

func (m *CreateUserReq) GetReferrerEmail() string {
	if m != nil {
		return m.ReferrerEmail
	}
	return ""
}

type CreateUserRes struct {
	User *User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *CreateUserRes) Reset()                    { *m = CreateUserRes{} }
func (m *CreateUserRes) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRes) ProtoMessage()               {}
func (*CreateUserRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *CreateUserRes) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UpdateUserReq struct {
	// @inject_tag: form:"id" binding:"required" validate="required"
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty" form:"id" binding:"required"`
	// @inject_tag: form:"avatar" validate="required"
	Avatar string `protobuf:"bytes,2,opt,name=avatar" json:"avatar,omitempty" form:"avatar"`
}

func (m *UpdateUserReq) Reset()                    { *m = UpdateUserReq{} }
func (m *UpdateUserReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserReq) ProtoMessage()               {}
func (*UpdateUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *UpdateUserReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateUserReq) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

type UpdateUserRes struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *UpdateUserRes) Reset()                    { *m = UpdateUserRes{} }
func (m *UpdateUserRes) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRes) ProtoMessage()               {}
func (*UpdateUserRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *UpdateUserRes) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UpdatePasswordReq struct {
	// @inject_tag: form:"email" binding:"required" validate="required,email"
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty" form:"email" binding:"required"`
	// @inject_tag: form:"verification_code" binding:"required" validate:"required,len=6"
	VerificationCode string `protobuf:"bytes,2,opt,name=verification_code,json=verificationCode" json:"verification_code,omitempty" form:"verification_code" binding:"required" validate:"required,len=6"`
	// @inject_tag: form:"password" binding:"required" validate:"required,min=6,max=32"
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty" form:"password" binding:"required" validate:"required,min=6,max=32"`
}

func (m *UpdatePasswordReq) Reset()                    { *m = UpdatePasswordReq{} }
func (m *UpdatePasswordReq) String() string            { return proto.CompactTextString(m) }
func (*UpdatePasswordReq) ProtoMessage()               {}
func (*UpdatePasswordReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *UpdatePasswordReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UpdatePasswordReq) GetVerificationCode() string {
	if m != nil {
		return m.VerificationCode
	}
	return ""
}

func (m *UpdatePasswordReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type UpdatePasswordRes struct {
}

func (m *UpdatePasswordRes) Reset()                    { *m = UpdatePasswordRes{} }
func (m *UpdatePasswordRes) String() string            { return proto.CompactTextString(m) }
func (*UpdatePasswordRes) ProtoMessage()               {}
func (*UpdatePasswordRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

type AuthUserReq struct {
	// @inject_tag: form:"email" binding:"required" validate="required,email"
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty" form:"email" binding:"required"`
	// @inject_tag: form:"password" binding:"required" validate:"required,min=6,max=32"
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty" form:"password" binding:"required" validate:"required,min=6,max=32"`
}

func (m *AuthUserReq) Reset()                    { *m = AuthUserReq{} }
func (m *AuthUserReq) String() string            { return proto.CompactTextString(m) }
func (*AuthUserReq) ProtoMessage()               {}
func (*AuthUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *AuthUserReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AuthUserReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthUserRes struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *AuthUserRes) Reset()                    { *m = AuthUserRes{} }
func (m *AuthUserRes) String() string            { return proto.CompactTextString(m) }
func (*AuthUserRes) ProtoMessage()               {}
func (*AuthUserRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *AuthUserRes) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type ShowUserReq struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ShowUserReq) Reset()                    { *m = ShowUserReq{} }
func (m *ShowUserReq) String() string            { return proto.CompactTextString(m) }
func (*ShowUserReq) ProtoMessage()               {}
func (*ShowUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *ShowUserReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ShowUserRes struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *ShowUserRes) Reset()                    { *m = ShowUserRes{} }
func (m *ShowUserRes) String() string            { return proto.CompactTextString(m) }
func (*ShowUserRes) ProtoMessage()               {}
func (*ShowUserRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *ShowUserRes) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type ImageVote struct {
	ImageId uint64 `protobuf:"varint,1,opt,name=image_id,json=imageId" json:"image_id,omitempty"`
	Vote    int64  `protobuf:"varint,2,opt,name=vote" json:"vote,omitempty"`
}

func (m *ImageVote) Reset()                    { *m = ImageVote{} }
func (m *ImageVote) String() string            { return proto.CompactTextString(m) }
func (*ImageVote) ProtoMessage()               {}
func (*ImageVote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *ImageVote) GetImageId() uint64 {
	if m != nil {
		return m.ImageId
	}
	return 0
}

func (m *ImageVote) GetVote() int64 {
	if m != nil {
		return m.Vote
	}
	return 0
}

type ImageVotesReq struct {
}

func (m *ImageVotesReq) Reset()                    { *m = ImageVotesReq{} }
func (m *ImageVotesReq) String() string            { return proto.CompactTextString(m) }
func (*ImageVotesReq) ProtoMessage()               {}
func (*ImageVotesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

type ImageVotesRes struct {
	Items []*ImageVote `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ImageVotesRes) Reset()                    { *m = ImageVotesRes{} }
func (m *ImageVotesRes) String() string            { return proto.CompactTextString(m) }
func (*ImageVotesRes) ProtoMessage()               {}
func (*ImageVotesRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *ImageVotesRes) GetItems() []*ImageVote {
	if m != nil {
		return m.Items
	}
	return nil
}

type ScoreLog struct {
	User         *User  `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Score        int64  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Description  string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	CategoryName string `protobuf:"bytes,4,opt,name=category_name,json=categoryName" json:"category_name,omitempty"`
	Symbol       string `protobuf:"bytes,5,opt,name=symbol" json:"symbol,omitempty"`
	CreatedAt    string `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *ScoreLog) Reset()                    { *m = ScoreLog{} }
func (m *ScoreLog) String() string            { return proto.CompactTextString(m) }
func (*ScoreLog) ProtoMessage()               {}
func (*ScoreLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *ScoreLog) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ScoreLog) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ScoreLog) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ScoreLog) GetCategoryName() string {
	if m != nil {
		return m.CategoryName
	}
	return ""
}

func (m *ScoreLog) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ScoreLog) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

type ScoreLogsReq struct {
	// @inject_tag: form:"order"
	Order ScoreLogOrders `protobuf:"varint,1,opt,name=order,enum=pb.ScoreLogOrders" json:"order,omitempty" form:"order"`
	// @inject_tag: form:"categoryId"
	CategoryId uint64 `protobuf:"varint,2,opt,name=category_id,json=categoryId" json:"category_id,omitempty" form:"categoryId"`
	// @inject_tag: form:"start"
	Start uint64 `protobuf:"varint,3,opt,name=start" json:"start,omitempty" form:"start"`
	// @inject_tag: form:"limit"
	Limit uint64 `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty" form:"limit"`
}

func (m *ScoreLogsReq) Reset()                    { *m = ScoreLogsReq{} }
func (m *ScoreLogsReq) String() string            { return proto.CompactTextString(m) }
func (*ScoreLogsReq) ProtoMessage()               {}
func (*ScoreLogsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *ScoreLogsReq) GetOrder() ScoreLogOrders {
	if m != nil {
		return m.Order
	}
	return ScoreLogOrders_NEW
}

func (m *ScoreLogsReq) GetCategoryId() uint64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *ScoreLogsReq) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ScoreLogsReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ScoreLogsRes struct {
	Items []*ScoreLog `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ScoreLogsRes) Reset()                    { *m = ScoreLogsRes{} }
func (m *ScoreLogsRes) String() string            { return proto.CompactTextString(m) }
func (*ScoreLogsRes) ProtoMessage()               {}
func (*ScoreLogsRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *ScoreLogsRes) GetItems() []*ScoreLog {
	if m != nil {
		return m.Items
	}
	return nil
}

// =====================
// comment
// =====================
type CommentsReq struct {
	// @inject_tag: form:"start"
	Start uint64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty" form:"start"`
	// @inject_tag: form:"limit"
	Limit uint64 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty" form:"limit"`
	// @inject_tag: form:"order"
	Order uint64 `protobuf:"varint,3,opt,name=order" json:"order,omitempty" form:"order"`
	// @inject_tag: form:"commentHostId" binding:"required" validate:"required"
	CommentHostId uint64 `protobuf:"varint,4,opt,name=comment_host_id,json=commentHostId" json:"comment_host_id,omitempty" form:"commentHostId" binding:"required" validate:"required"`
}

func (m *CommentsReq) Reset()                    { *m = CommentsReq{} }
func (m *CommentsReq) String() string            { return proto.CompactTextString(m) }
func (*CommentsReq) ProtoMessage()               {}
func (*CommentsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *CommentsReq) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *CommentsReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *CommentsReq) GetOrder() uint64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *CommentsReq) GetCommentHostId() uint64 {
	if m != nil {
		return m.CommentHostId
	}
	return 0
}

type CommentsRes struct {
	Items []*Comment `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *CommentsRes) Reset()                    { *m = CommentsRes{} }
func (m *CommentsRes) String() string            { return proto.CompactTextString(m) }
func (*CommentsRes) ProtoMessage()               {}
func (*CommentsRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *CommentsRes) GetItems() []*Comment {
	if m != nil {
		return m.Items
	}
	return nil
}

type CreateCommentReq struct {
	// @inject_tag: form:"comment_host_id" binding:"required" validate:"required"
	CommentHostId uint64 `protobuf:"varint,1,opt,name=comment_host_id,json=commentHostId" json:"comment_host_id,omitempty" form:"comment_host_id" binding:"required" validate:"required"`
	// @inject_tag: form:"replyId"
	//    uint64 reply_id = 2;
	// @inject_tag: form:"content" binding:"required" validate:"required"
	Content string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty" form:"content" binding:"required" validate:"required"`
}

func (m *CreateCommentReq) Reset()                    { *m = CreateCommentReq{} }
func (m *CreateCommentReq) String() string            { return proto.CompactTextString(m) }
func (*CreateCommentReq) ProtoMessage()               {}
func (*CreateCommentReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *CreateCommentReq) GetCommentHostId() uint64 {
	if m != nil {
		return m.CommentHostId
	}
	return 0
}

func (m *CreateCommentReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type CreateCommentRes struct {
	Comment *Comment `protobuf:"bytes,1,opt,name=comment" json:"comment,omitempty"`
}

func (m *CreateCommentRes) Reset()                    { *m = CreateCommentRes{} }
func (m *CreateCommentRes) String() string            { return proto.CompactTextString(m) }
func (*CreateCommentRes) ProtoMessage()               {}
func (*CreateCommentRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *CreateCommentRes) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type UpdateCommentReq struct {
	// @inject_tag: form:"id" binding:"required" validate:"required"
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty" form:"id" binding:"required" validate:"required"`
	// @inject_tag: form:"content" binding:"required" validate:"required"
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty" form:"content" binding:"required" validate:"required"`
}

func (m *UpdateCommentReq) Reset()                    { *m = UpdateCommentReq{} }
func (m *UpdateCommentReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateCommentReq) ProtoMessage()               {}
func (*UpdateCommentReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *UpdateCommentReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateCommentReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type UpdateCommentRes struct {
}

func (m *UpdateCommentRes) Reset()                    { *m = UpdateCommentRes{} }
func (m *UpdateCommentRes) String() string            { return proto.CompactTextString(m) }
func (*UpdateCommentRes) ProtoMessage()               {}
func (*UpdateCommentRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

type CreateCommentHostReq struct {
}

func (m *CreateCommentHostReq) Reset()                    { *m = CreateCommentHostReq{} }
func (m *CreateCommentHostReq) String() string            { return proto.CompactTextString(m) }
func (*CreateCommentHostReq) ProtoMessage()               {}
func (*CreateCommentHostReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

type CreateCommentHostRes struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateCommentHostRes) Reset()                    { *m = CreateCommentHostRes{} }
func (m *CreateCommentHostRes) String() string            { return proto.CompactTextString(m) }
func (*CreateCommentHostRes) ProtoMessage()               {}
func (*CreateCommentHostRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *CreateCommentHostRes) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CreateFingerprintReq struct {
	// @inject_tag: form:"hash" binding:"required" validate:"required,len=32"
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty" form:"hash" binding:"required" validate:"required,len=32"`
}

func (m *CreateFingerprintReq) Reset()                    { *m = CreateFingerprintReq{} }
func (m *CreateFingerprintReq) String() string            { return proto.CompactTextString(m) }
func (*CreateFingerprintReq) ProtoMessage()               {}
func (*CreateFingerprintReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *CreateFingerprintReq) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type CreateFingerprintRes struct {
	Hash   string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *CreateFingerprintRes) Reset()                    { *m = CreateFingerprintRes{} }
func (m *CreateFingerprintRes) String() string            { return proto.CompactTextString(m) }
func (*CreateFingerprintRes) ProtoMessage()               {}
func (*CreateFingerprintRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *CreateFingerprintRes) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *CreateFingerprintRes) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type UpdateFingerprintReq struct {
	// @inject_tag: form:"hash" binding:"required" validate:"required,len=32"
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty" form:"hash" binding:"required" validate:"required,len=32"`
	// @inject_tag: form:"userId" validate:"required"
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty" form:"userId" validate:"required"`
}

func (m *UpdateFingerprintReq) Reset()                    { *m = UpdateFingerprintReq{} }
func (m *UpdateFingerprintReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateFingerprintReq) ProtoMessage()               {}
func (*UpdateFingerprintReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

func (m *UpdateFingerprintReq) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *UpdateFingerprintReq) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type UpdateFingerprintRes struct {
}

func (m *UpdateFingerprintRes) Reset()                    { *m = UpdateFingerprintRes{} }
func (m *UpdateFingerprintRes) String() string            { return proto.CompactTextString(m) }
func (*UpdateFingerprintRes) ProtoMessage()               {}
func (*UpdateFingerprintRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

type ReviewCategory struct {
	Id   uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ReviewCategory) Reset()                    { *m = ReviewCategory{} }
func (m *ReviewCategory) String() string            { return proto.CompactTextString(m) }
func (*ReviewCategory) ProtoMessage()               {}
func (*ReviewCategory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88} }

func (m *ReviewCategory) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReviewCategory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Review struct {
	Id               uint64          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ImageId          uint64          `protobuf:"varint,2,opt,name=image_id,json=imageId" json:"image_id,omitempty"`
	CreatorId        uint64          `protobuf:"varint,3,opt,name=creator_id,json=creatorId" json:"creator_id,omitempty"`
	ReviewCategoryId uint64          `protobuf:"varint,4,opt,name=review_category_id,json=reviewCategoryId" json:"review_category_id,omitempty"`
	AgreeCount       uint64          `protobuf:"varint,5,opt,name=agree_count,json=agreeCount" json:"agree_count,omitempty"`
	DisagreeCount    uint64          `protobuf:"varint,6,opt,name=disagree_count,json=disagreeCount" json:"disagree_count,omitempty"`
	EndAt            string          `protobuf:"bytes,7,opt,name=end_at,json=endAt" json:"end_at,omitempty"`
	CreatedAt        string          `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt        string          `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	ReviewCategory   *ReviewCategory `protobuf:"bytes,10,opt,name=review_category,json=reviewCategory" json:"review_category,omitempty"`
	User             *User           `protobuf:"bytes,11,opt,name=user" json:"user,omitempty"`
	Image            *Image          `protobuf:"bytes,12,opt,name=image" json:"image,omitempty"`
	Closed           bool            `protobuf:"varint,13,opt,name=closed" json:"closed,omitempty"`
	Opinion          ReviewOpinions  `protobuf:"varint,14,opt,name=opinion,enum=pb.ReviewOpinions" json:"opinion,omitempty"`
	Content          string          `protobuf:"bytes,15,opt,name=content" json:"content,omitempty"`
}

func (m *Review) Reset()                    { *m = Review{} }
func (m *Review) String() string            { return proto.CompactTextString(m) }
func (*Review) ProtoMessage()               {}
func (*Review) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

func (m *Review) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Review) GetImageId() uint64 {
	if m != nil {
		return m.ImageId
	}
	return 0
}

func (m *Review) GetCreatorId() uint64 {
	if m != nil {
		return m.CreatorId
	}
	return 0
}

func (m *Review) GetReviewCategoryId() uint64 {
	if m != nil {
		return m.ReviewCategoryId
	}
	return 0
}

func (m *Review) GetAgreeCount() uint64 {
	if m != nil {
		return m.AgreeCount
	}
	return 0
}

func (m *Review) GetDisagreeCount() uint64 {
	if m != nil {
		return m.DisagreeCount
	}
	return 0
}

func (m *Review) GetEndAt() string {
	if m != nil {
		return m.EndAt
	}
	return ""
}

func (m *Review) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Review) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Review) GetReviewCategory() *ReviewCategory {
	if m != nil {
		return m.ReviewCategory
	}
	return nil
}

func (m *Review) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Review) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Review) GetClosed() bool {
	if m != nil {
		return m.Closed
	}
	return false
}

func (m *Review) GetOpinion() ReviewOpinions {
	if m != nil {
		return m.Opinion
	}
	return ReviewOpinions_UNKNOWN
}

func (m *Review) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ReviewsReq struct {
	// @inject_tag: form:"start"
	Start uint64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty" form:"start"`
	// @inject_tag: form:"limit"
	Limit uint64 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty" form:"limit"`
	// @inject_tag: form:"order"
	Order ReviewsOrder `protobuf:"varint,3,opt,name=order,enum=pb.ReviewsOrder" json:"order,omitempty" form:"order"`
	// @inject_tag: form:"total"
	Total bool `protobuf:"varint,4,opt,name=total" json:"total,omitempty" form:"total"`
}

func (m *ReviewsReq) Reset()                    { *m = ReviewsReq{} }
func (m *ReviewsReq) String() string            { return proto.CompactTextString(m) }
func (*ReviewsReq) ProtoMessage()               {}
func (*ReviewsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

func (m *ReviewsReq) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReviewsReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReviewsReq) GetOrder() ReviewsOrder {
	if m != nil {
		return m.Order
	}
	return ReviewsOrder_UPDATE
}

func (m *ReviewsReq) GetTotal() bool {
	if m != nil {
		return m.Total
	}
	return false
}

type ReviewsRes struct {
	Items []*Review `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Total uint64    `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *ReviewsRes) Reset()                    { *m = ReviewsRes{} }
func (m *ReviewsRes) String() string            { return proto.CompactTextString(m) }
func (*ReviewsRes) ProtoMessage()               {}
func (*ReviewsRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

func (m *ReviewsRes) GetItems() []*Review {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ReviewsRes) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type UpdateReviewOpinionReq struct {
	// @inject_tag: form:"review_id" binding:"required" validate:"required"
	ReviewId uint64 `protobuf:"varint,1,opt,name=review_id,json=reviewId" json:"review_id,omitempty" form:"review_id" binding:"required" validate:"required"`
	// @inject_tag: form:"opinion"
	Opinion ReviewOpinions `protobuf:"varint,2,opt,name=opinion,enum=pb.ReviewOpinions" json:"opinion,omitempty" form:"opinion"`
}

func (m *UpdateReviewOpinionReq) Reset()                    { *m = UpdateReviewOpinionReq{} }
func (m *UpdateReviewOpinionReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateReviewOpinionReq) ProtoMessage()               {}
func (*UpdateReviewOpinionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

func (m *UpdateReviewOpinionReq) GetReviewId() uint64 {
	if m != nil {
		return m.ReviewId
	}
	return 0
}

func (m *UpdateReviewOpinionReq) GetOpinion() ReviewOpinions {
	if m != nil {
		return m.Opinion
	}
	return ReviewOpinions_UNKNOWN
}

type UpdateReviewOpinionRes struct {
}

func (m *UpdateReviewOpinionRes) Reset()                    { *m = UpdateReviewOpinionRes{} }
func (m *UpdateReviewOpinionRes) String() string            { return proto.CompactTextString(m) }
func (*UpdateReviewOpinionRes) ProtoMessage()               {}
func (*UpdateReviewOpinionRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93} }

func init() {
	proto.RegisterType((*Album)(nil), "pb.Album")
	proto.RegisterType((*Image)(nil), "pb.Image")
	proto.RegisterType((*ImageTag)(nil), "pb.ImageTag")
	proto.RegisterType((*Post)(nil), "pb.Post")
	proto.RegisterType((*ImagesReq)(nil), "pb.ImagesReq")
	proto.RegisterType((*ImagesRes)(nil), "pb.ImagesRes")
	proto.RegisterType((*DownloadImageReq)(nil), "pb.DownloadImageReq")
	proto.RegisterType((*DownloadImageRes)(nil), "pb.DownloadImageRes")
	proto.RegisterType((*UpdateImageVoteReq)(nil), "pb.UpdateImageVoteReq")
	proto.RegisterType((*UpdateImageVoteRes)(nil), "pb.UpdateImageVoteRes")
	proto.RegisterType((*UpdateImageNameReq)(nil), "pb.UpdateImageNameReq")
	proto.RegisterType((*UpdateImageNameRes)(nil), "pb.UpdateImageNameRes")
	proto.RegisterType((*CreateImageTagReq)(nil), "pb.CreateImageTagReq")
	proto.RegisterType((*CreateImageTagRes)(nil), "pb.CreateImageTagRes")
	proto.RegisterType((*DeleteImageTagReq)(nil), "pb.DeleteImageTagReq")
	proto.RegisterType((*DeleteImageTagRes)(nil), "pb.DeleteImageTagRes")
	proto.RegisterType((*UpdateImageTagVoteReq)(nil), "pb.UpdateImageTagVoteReq")
	proto.RegisterType((*UpdateImageTagVoteRes)(nil), "pb.UpdateImageTagVoteRes")
	proto.RegisterType((*AlbumsReq)(nil), "pb.AlbumsReq")
	proto.RegisterType((*AlbumsRes)(nil), "pb.AlbumsRes")
	proto.RegisterType((*AlbumImagesReq)(nil), "pb.AlbumImagesReq")
	proto.RegisterType((*AlbumImagesRes)(nil), "pb.AlbumImagesRes")
	proto.RegisterType((*ShowAlbumReq)(nil), "pb.ShowAlbumReq")
	proto.RegisterType((*ShowAlbumRes)(nil), "pb.ShowAlbumRes")
	proto.RegisterType((*CreateAlbumReq)(nil), "pb.CreateAlbumReq")
	proto.RegisterType((*CreateAlbumRes)(nil), "pb.CreateAlbumRes")
	proto.RegisterType((*UpdateAlbumReq)(nil), "pb.UpdateAlbumReq")
	proto.RegisterType((*UpdateAlbumRes)(nil), "pb.UpdateAlbumRes")
	proto.RegisterType((*CreateAlbumImageReq)(nil), "pb.CreateAlbumImageReq")
	proto.RegisterType((*CreateAlbumImageRes)(nil), "pb.CreateAlbumImageRes")
	proto.RegisterType((*DeleteAlbumImageReq)(nil), "pb.DeleteAlbumImageReq")
	proto.RegisterType((*DeleteAlbumImageRes)(nil), "pb.DeleteAlbumImageRes")
	proto.RegisterType((*DeleteAlbumReq)(nil), "pb.DeleteAlbumReq")
	proto.RegisterType((*DeleteAlbumRes)(nil), "pb.DeleteAlbumRes")
	proto.RegisterType((*UserAlbumsReq)(nil), "pb.UserAlbumsReq")
	proto.RegisterType((*UserAlbumsRes)(nil), "pb.UserAlbumsRes")
	proto.RegisterType((*PostsReq)(nil), "pb.PostsReq")
	proto.RegisterType((*PostsRes)(nil), "pb.PostsRes")
	proto.RegisterType((*ShowPostReq)(nil), "pb.ShowPostReq")
	proto.RegisterType((*ShowPostRes)(nil), "pb.ShowPostRes")
	proto.RegisterType((*CreateZoomLogReq)(nil), "pb.CreateZoomLogReq")
	proto.RegisterType((*CreateZoomLogRes)(nil), "pb.CreateZoomLogRes")
	proto.RegisterType((*CreateDownloadLogReq)(nil), "pb.CreateDownloadLogReq")
	proto.RegisterType((*CreateDownloadLogRes)(nil), "pb.CreateDownloadLogRes")
	proto.RegisterType((*CreateSearchLogReq)(nil), "pb.CreateSearchLogReq")
	proto.RegisterType((*CreateSearchLogRes)(nil), "pb.CreateSearchLogRes")
	proto.RegisterType((*CreateErrorLogReq)(nil), "pb.CreateErrorLogReq")
	proto.RegisterType((*CreateErrorLogRes)(nil), "pb.CreateErrorLogRes")
	proto.RegisterType((*User)(nil), "pb.User")
	proto.RegisterType((*Comment)(nil), "pb.Comment")
	proto.RegisterType((*CreateTokenReq)(nil), "pb.CreateTokenReq")
	proto.RegisterType((*CreateTokenRes)(nil), "pb.CreateTokenRes")
	proto.RegisterType((*AuthTokenReq)(nil), "pb.AuthTokenReq")
	proto.RegisterType((*AuthTokenRes)(nil), "pb.AuthTokenRes")
	proto.RegisterType((*UpdateTokenReq)(nil), "pb.UpdateTokenReq")
	proto.RegisterType((*UpdateTokenRes)(nil), "pb.UpdateTokenRes")
	proto.RegisterType((*CreateJwtReq)(nil), "pb.CreateJwtReq")
	proto.RegisterType((*CreateJwtRes)(nil), "pb.CreateJwtRes")
	proto.RegisterType((*CreateVerificationEmailReq)(nil), "pb.CreateVerificationEmailReq")
	proto.RegisterType((*CreateVerificationEmailRes)(nil), "pb.CreateVerificationEmailRes")
	proto.RegisterType((*CreateUserReq)(nil), "pb.CreateUserReq")
	proto.RegisterType((*CreateUserRes)(nil), "pb.CreateUserRes")
	proto.RegisterType((*UpdateUserReq)(nil), "pb.UpdateUserReq")
	proto.RegisterType((*UpdateUserRes)(nil), "pb.UpdateUserRes")
	proto.RegisterType((*UpdatePasswordReq)(nil), "pb.UpdatePasswordReq")
	proto.RegisterType((*UpdatePasswordRes)(nil), "pb.UpdatePasswordRes")
	proto.RegisterType((*AuthUserReq)(nil), "pb.AuthUserReq")
	proto.RegisterType((*AuthUserRes)(nil), "pb.AuthUserRes")
	proto.RegisterType((*ShowUserReq)(nil), "pb.ShowUserReq")
	proto.RegisterType((*ShowUserRes)(nil), "pb.ShowUserRes")
	proto.RegisterType((*ImageVote)(nil), "pb.ImageVote")
	proto.RegisterType((*ImageVotesReq)(nil), "pb.ImageVotesReq")
	proto.RegisterType((*ImageVotesRes)(nil), "pb.ImageVotesRes")
	proto.RegisterType((*ScoreLog)(nil), "pb.ScoreLog")
	proto.RegisterType((*ScoreLogsReq)(nil), "pb.ScoreLogsReq")
	proto.RegisterType((*ScoreLogsRes)(nil), "pb.ScoreLogsRes")
	proto.RegisterType((*CommentsReq)(nil), "pb.CommentsReq")
	proto.RegisterType((*CommentsRes)(nil), "pb.CommentsRes")
	proto.RegisterType((*CreateCommentReq)(nil), "pb.CreateCommentReq")
	proto.RegisterType((*CreateCommentRes)(nil), "pb.CreateCommentRes")
	proto.RegisterType((*UpdateCommentReq)(nil), "pb.UpdateCommentReq")
	proto.RegisterType((*UpdateCommentRes)(nil), "pb.UpdateCommentRes")
	proto.RegisterType((*CreateCommentHostReq)(nil), "pb.CreateCommentHostReq")
	proto.RegisterType((*CreateCommentHostRes)(nil), "pb.CreateCommentHostRes")
	proto.RegisterType((*CreateFingerprintReq)(nil), "pb.CreateFingerprintReq")
	proto.RegisterType((*CreateFingerprintRes)(nil), "pb.CreateFingerprintRes")
	proto.RegisterType((*UpdateFingerprintReq)(nil), "pb.UpdateFingerprintReq")
	proto.RegisterType((*UpdateFingerprintRes)(nil), "pb.UpdateFingerprintRes")
	proto.RegisterType((*ReviewCategory)(nil), "pb.ReviewCategory")
	proto.RegisterType((*Review)(nil), "pb.Review")
	proto.RegisterType((*ReviewsReq)(nil), "pb.ReviewsReq")
	proto.RegisterType((*ReviewsRes)(nil), "pb.ReviewsRes")
	proto.RegisterType((*UpdateReviewOpinionReq)(nil), "pb.UpdateReviewOpinionReq")
	proto.RegisterType((*UpdateReviewOpinionRes)(nil), "pb.UpdateReviewOpinionRes")
	proto.RegisterEnum("pb.ImageSorts", ImageSorts_name, ImageSorts_value)
	proto.RegisterEnum("pb.ScoreLogOrders", ScoreLogOrders_name, ScoreLogOrders_value)
	proto.RegisterEnum("pb.ReviewOpinions", ReviewOpinions_name, ReviewOpinions_value)
	proto.RegisterEnum("pb.ReviewsOrder", ReviewsOrder_name, ReviewsOrder_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Imgtrip service

type ImgtripClient interface {
	// image
	Images(ctx context.Context, in *ImagesReq, opts ...grpc.CallOption) (*ImagesRes, error)
	DownloadImage(ctx context.Context, in *DownloadImageReq, opts ...grpc.CallOption) (*DownloadImageRes, error)
	UpdateImageVote(ctx context.Context, in *UpdateImageVoteReq, opts ...grpc.CallOption) (*UpdateImageVoteRes, error)
	UpdateImageName(ctx context.Context, in *UpdateImageNameReq, opts ...grpc.CallOption) (*UpdateImageNameRes, error)
	CreateImageTag(ctx context.Context, in *CreateImageTagReq, opts ...grpc.CallOption) (*CreateImageTagRes, error)
	DeleteImageTag(ctx context.Context, in *DeleteImageTagReq, opts ...grpc.CallOption) (*DeleteImageTagRes, error)
	UpdateImageTagVote(ctx context.Context, in *UpdateImageTagVoteReq, opts ...grpc.CallOption) (*UpdateImageTagVoteRes, error)
	// album
	Albums(ctx context.Context, in *AlbumsReq, opts ...grpc.CallOption) (*AlbumsRes, error)
	ShowAlbum(ctx context.Context, in *ShowAlbumReq, opts ...grpc.CallOption) (*ShowAlbumRes, error)
	AlbumImages(ctx context.Context, in *AlbumImagesReq, opts ...grpc.CallOption) (*AlbumImagesRes, error)
	CreateAlbumImage(ctx context.Context, in *CreateAlbumImageReq, opts ...grpc.CallOption) (*CreateAlbumImageRes, error)
	DeleteAlbumImage(ctx context.Context, in *DeleteAlbumImageReq, opts ...grpc.CallOption) (*DeleteAlbumImageRes, error)
	CreateAlbum(ctx context.Context, in *CreateAlbumReq, opts ...grpc.CallOption) (*CreateAlbumRes, error)
	UpdateAlbum(ctx context.Context, in *UpdateAlbumReq, opts ...grpc.CallOption) (*UpdateAlbumRes, error)
	DeleteAlbum(ctx context.Context, in *DeleteAlbumReq, opts ...grpc.CallOption) (*DeleteAlbumRes, error)
	UserAlbums(ctx context.Context, in *UserAlbumsReq, opts ...grpc.CallOption) (*UserAlbumsRes, error)
	// post
	Posts(ctx context.Context, in *PostsReq, opts ...grpc.CallOption) (*PostsRes, error)
	ShowPost(ctx context.Context, in *ShowPostReq, opts ...grpc.CallOption) (*ShowPostRes, error)
	// log
	CreateZoomLog(ctx context.Context, in *CreateZoomLogReq, opts ...grpc.CallOption) (*CreateZoomLogRes, error)
	CreateDownloadLog(ctx context.Context, in *CreateDownloadLogReq, opts ...grpc.CallOption) (*CreateDownloadLogRes, error)
	CreateSearchLog(ctx context.Context, in *CreateSearchLogReq, opts ...grpc.CallOption) (*CreateSearchLogRes, error)
	CreateErrorLog(ctx context.Context, in *CreateErrorLogReq, opts ...grpc.CallOption) (*CreateErrorLogRes, error)
	// token
	AuthToken(ctx context.Context, in *AuthTokenReq, opts ...grpc.CallOption) (*AuthTokenRes, error)
	CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenRes, error)
	UpdateToken(ctx context.Context, in *UpdateTokenReq, opts ...grpc.CallOption) (*UpdateTokenRes, error)
	// user
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserRes, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRes, error)
	AuthUser(ctx context.Context, in *AuthUserReq, opts ...grpc.CallOption) (*AuthUserRes, error)
	ShowUser(ctx context.Context, in *ShowUserReq, opts ...grpc.CallOption) (*ShowUserRes, error)
	CreateJwt(ctx context.Context, in *CreateJwtReq, opts ...grpc.CallOption) (*CreateJwtRes, error)
	CreateVerificationEmail(ctx context.Context, in *CreateVerificationEmailReq, opts ...grpc.CallOption) (*CreateVerificationEmailRes, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*UpdatePasswordRes, error)
	ImageVotes(ctx context.Context, in *ImageVotesReq, opts ...grpc.CallOption) (*ImageVotesRes, error)
	ScoreLogs(ctx context.Context, in *ScoreLogsReq, opts ...grpc.CallOption) (*ScoreLogsRes, error)
	// comment
	Comments(ctx context.Context, in *CommentsReq, opts ...grpc.CallOption) (*CommentsRes, error)
	CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentRes, error)
	UpdateComment(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentRes, error)
	CreateCommentHost(ctx context.Context, in *CreateCommentHostReq, opts ...grpc.CallOption) (*CreateCommentHostRes, error)
	// fingerprint
	CreateFingerprint(ctx context.Context, in *CreateFingerprintReq, opts ...grpc.CallOption) (*CreateFingerprintRes, error)
	UpdateFingerprint(ctx context.Context, in *UpdateFingerprintReq, opts ...grpc.CallOption) (*UpdateFingerprintRes, error)
	// review
	Reviews(ctx context.Context, in *ReviewsReq, opts ...grpc.CallOption) (*ReviewsRes, error)
	UpdateReviewOpinion(ctx context.Context, in *UpdateReviewOpinionReq, opts ...grpc.CallOption) (*UpdateReviewOpinionRes, error)
}

type imgtripClient struct {
	cc *grpc.ClientConn
}

func NewImgtripClient(cc *grpc.ClientConn) ImgtripClient {
	return &imgtripClient{cc}
}

func (c *imgtripClient) Images(ctx context.Context, in *ImagesReq, opts ...grpc.CallOption) (*ImagesRes, error) {
	out := new(ImagesRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/Images", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) DownloadImage(ctx context.Context, in *DownloadImageReq, opts ...grpc.CallOption) (*DownloadImageRes, error) {
	out := new(DownloadImageRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/DownloadImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) UpdateImageVote(ctx context.Context, in *UpdateImageVoteReq, opts ...grpc.CallOption) (*UpdateImageVoteRes, error) {
	out := new(UpdateImageVoteRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/UpdateImageVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) UpdateImageName(ctx context.Context, in *UpdateImageNameReq, opts ...grpc.CallOption) (*UpdateImageNameRes, error) {
	out := new(UpdateImageNameRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/UpdateImageName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) CreateImageTag(ctx context.Context, in *CreateImageTagReq, opts ...grpc.CallOption) (*CreateImageTagRes, error) {
	out := new(CreateImageTagRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/CreateImageTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) DeleteImageTag(ctx context.Context, in *DeleteImageTagReq, opts ...grpc.CallOption) (*DeleteImageTagRes, error) {
	out := new(DeleteImageTagRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/DeleteImageTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) UpdateImageTagVote(ctx context.Context, in *UpdateImageTagVoteReq, opts ...grpc.CallOption) (*UpdateImageTagVoteRes, error) {
	out := new(UpdateImageTagVoteRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/UpdateImageTagVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) Albums(ctx context.Context, in *AlbumsReq, opts ...grpc.CallOption) (*AlbumsRes, error) {
	out := new(AlbumsRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/Albums", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) ShowAlbum(ctx context.Context, in *ShowAlbumReq, opts ...grpc.CallOption) (*ShowAlbumRes, error) {
	out := new(ShowAlbumRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/ShowAlbum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) AlbumImages(ctx context.Context, in *AlbumImagesReq, opts ...grpc.CallOption) (*AlbumImagesRes, error) {
	out := new(AlbumImagesRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/AlbumImages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) CreateAlbumImage(ctx context.Context, in *CreateAlbumImageReq, opts ...grpc.CallOption) (*CreateAlbumImageRes, error) {
	out := new(CreateAlbumImageRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/CreateAlbumImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) DeleteAlbumImage(ctx context.Context, in *DeleteAlbumImageReq, opts ...grpc.CallOption) (*DeleteAlbumImageRes, error) {
	out := new(DeleteAlbumImageRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/DeleteAlbumImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) CreateAlbum(ctx context.Context, in *CreateAlbumReq, opts ...grpc.CallOption) (*CreateAlbumRes, error) {
	out := new(CreateAlbumRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/CreateAlbum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) UpdateAlbum(ctx context.Context, in *UpdateAlbumReq, opts ...grpc.CallOption) (*UpdateAlbumRes, error) {
	out := new(UpdateAlbumRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/UpdateAlbum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) DeleteAlbum(ctx context.Context, in *DeleteAlbumReq, opts ...grpc.CallOption) (*DeleteAlbumRes, error) {
	out := new(DeleteAlbumRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/DeleteAlbum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) UserAlbums(ctx context.Context, in *UserAlbumsReq, opts ...grpc.CallOption) (*UserAlbumsRes, error) {
	out := new(UserAlbumsRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/UserAlbums", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) Posts(ctx context.Context, in *PostsReq, opts ...grpc.CallOption) (*PostsRes, error) {
	out := new(PostsRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/Posts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) ShowPost(ctx context.Context, in *ShowPostReq, opts ...grpc.CallOption) (*ShowPostRes, error) {
	out := new(ShowPostRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/ShowPost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) CreateZoomLog(ctx context.Context, in *CreateZoomLogReq, opts ...grpc.CallOption) (*CreateZoomLogRes, error) {
	out := new(CreateZoomLogRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/CreateZoomLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) CreateDownloadLog(ctx context.Context, in *CreateDownloadLogReq, opts ...grpc.CallOption) (*CreateDownloadLogRes, error) {
	out := new(CreateDownloadLogRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/CreateDownloadLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) CreateSearchLog(ctx context.Context, in *CreateSearchLogReq, opts ...grpc.CallOption) (*CreateSearchLogRes, error) {
	out := new(CreateSearchLogRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/CreateSearchLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) CreateErrorLog(ctx context.Context, in *CreateErrorLogReq, opts ...grpc.CallOption) (*CreateErrorLogRes, error) {
	out := new(CreateErrorLogRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/CreateErrorLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) AuthToken(ctx context.Context, in *AuthTokenReq, opts ...grpc.CallOption) (*AuthTokenRes, error) {
	out := new(AuthTokenRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/AuthToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenRes, error) {
	out := new(CreateTokenRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/CreateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) UpdateToken(ctx context.Context, in *UpdateTokenReq, opts ...grpc.CallOption) (*UpdateTokenRes, error) {
	out := new(UpdateTokenRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/UpdateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserRes, error) {
	out := new(CreateUserRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRes, error) {
	out := new(UpdateUserRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) AuthUser(ctx context.Context, in *AuthUserReq, opts ...grpc.CallOption) (*AuthUserRes, error) {
	out := new(AuthUserRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/AuthUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) ShowUser(ctx context.Context, in *ShowUserReq, opts ...grpc.CallOption) (*ShowUserRes, error) {
	out := new(ShowUserRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/ShowUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) CreateJwt(ctx context.Context, in *CreateJwtReq, opts ...grpc.CallOption) (*CreateJwtRes, error) {
	out := new(CreateJwtRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/CreateJwt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) CreateVerificationEmail(ctx context.Context, in *CreateVerificationEmailReq, opts ...grpc.CallOption) (*CreateVerificationEmailRes, error) {
	out := new(CreateVerificationEmailRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/CreateVerificationEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*UpdatePasswordRes, error) {
	out := new(UpdatePasswordRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/UpdatePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) ImageVotes(ctx context.Context, in *ImageVotesReq, opts ...grpc.CallOption) (*ImageVotesRes, error) {
	out := new(ImageVotesRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/ImageVotes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) ScoreLogs(ctx context.Context, in *ScoreLogsReq, opts ...grpc.CallOption) (*ScoreLogsRes, error) {
	out := new(ScoreLogsRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/ScoreLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) Comments(ctx context.Context, in *CommentsReq, opts ...grpc.CallOption) (*CommentsRes, error) {
	out := new(CommentsRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/Comments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentRes, error) {
	out := new(CreateCommentRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/CreateComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) UpdateComment(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentRes, error) {
	out := new(UpdateCommentRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/UpdateComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) CreateCommentHost(ctx context.Context, in *CreateCommentHostReq, opts ...grpc.CallOption) (*CreateCommentHostRes, error) {
	out := new(CreateCommentHostRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/CreateCommentHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) CreateFingerprint(ctx context.Context, in *CreateFingerprintReq, opts ...grpc.CallOption) (*CreateFingerprintRes, error) {
	out := new(CreateFingerprintRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/CreateFingerprint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) UpdateFingerprint(ctx context.Context, in *UpdateFingerprintReq, opts ...grpc.CallOption) (*UpdateFingerprintRes, error) {
	out := new(UpdateFingerprintRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/UpdateFingerprint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) Reviews(ctx context.Context, in *ReviewsReq, opts ...grpc.CallOption) (*ReviewsRes, error) {
	out := new(ReviewsRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/Reviews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgtripClient) UpdateReviewOpinion(ctx context.Context, in *UpdateReviewOpinionReq, opts ...grpc.CallOption) (*UpdateReviewOpinionRes, error) {
	out := new(UpdateReviewOpinionRes)
	err := grpc.Invoke(ctx, "/pb.Imgtrip/UpdateReviewOpinion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Imgtrip service

type ImgtripServer interface {
	// image
	Images(context.Context, *ImagesReq) (*ImagesRes, error)
	DownloadImage(context.Context, *DownloadImageReq) (*DownloadImageRes, error)
	UpdateImageVote(context.Context, *UpdateImageVoteReq) (*UpdateImageVoteRes, error)
	UpdateImageName(context.Context, *UpdateImageNameReq) (*UpdateImageNameRes, error)
	CreateImageTag(context.Context, *CreateImageTagReq) (*CreateImageTagRes, error)
	DeleteImageTag(context.Context, *DeleteImageTagReq) (*DeleteImageTagRes, error)
	UpdateImageTagVote(context.Context, *UpdateImageTagVoteReq) (*UpdateImageTagVoteRes, error)
	// album
	Albums(context.Context, *AlbumsReq) (*AlbumsRes, error)
	ShowAlbum(context.Context, *ShowAlbumReq) (*ShowAlbumRes, error)
	AlbumImages(context.Context, *AlbumImagesReq) (*AlbumImagesRes, error)
	CreateAlbumImage(context.Context, *CreateAlbumImageReq) (*CreateAlbumImageRes, error)
	DeleteAlbumImage(context.Context, *DeleteAlbumImageReq) (*DeleteAlbumImageRes, error)
	CreateAlbum(context.Context, *CreateAlbumReq) (*CreateAlbumRes, error)
	UpdateAlbum(context.Context, *UpdateAlbumReq) (*UpdateAlbumRes, error)
	DeleteAlbum(context.Context, *DeleteAlbumReq) (*DeleteAlbumRes, error)
	UserAlbums(context.Context, *UserAlbumsReq) (*UserAlbumsRes, error)
	// post
	Posts(context.Context, *PostsReq) (*PostsRes, error)
	ShowPost(context.Context, *ShowPostReq) (*ShowPostRes, error)
	// log
	CreateZoomLog(context.Context, *CreateZoomLogReq) (*CreateZoomLogRes, error)
	CreateDownloadLog(context.Context, *CreateDownloadLogReq) (*CreateDownloadLogRes, error)
	CreateSearchLog(context.Context, *CreateSearchLogReq) (*CreateSearchLogRes, error)
	CreateErrorLog(context.Context, *CreateErrorLogReq) (*CreateErrorLogRes, error)
	// token
	AuthToken(context.Context, *AuthTokenReq) (*AuthTokenRes, error)
	CreateToken(context.Context, *CreateTokenReq) (*CreateTokenRes, error)
	UpdateToken(context.Context, *UpdateTokenReq) (*UpdateTokenRes, error)
	// user
	CreateUser(context.Context, *CreateUserReq) (*CreateUserRes, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserRes, error)
	AuthUser(context.Context, *AuthUserReq) (*AuthUserRes, error)
	ShowUser(context.Context, *ShowUserReq) (*ShowUserRes, error)
	CreateJwt(context.Context, *CreateJwtReq) (*CreateJwtRes, error)
	CreateVerificationEmail(context.Context, *CreateVerificationEmailReq) (*CreateVerificationEmailRes, error)
	UpdatePassword(context.Context, *UpdatePasswordReq) (*UpdatePasswordRes, error)
	ImageVotes(context.Context, *ImageVotesReq) (*ImageVotesRes, error)
	ScoreLogs(context.Context, *ScoreLogsReq) (*ScoreLogsRes, error)
	// comment
	Comments(context.Context, *CommentsReq) (*CommentsRes, error)
	CreateComment(context.Context, *CreateCommentReq) (*CreateCommentRes, error)
	UpdateComment(context.Context, *UpdateCommentReq) (*UpdateCommentRes, error)
	CreateCommentHost(context.Context, *CreateCommentHostReq) (*CreateCommentHostRes, error)
	// fingerprint
	CreateFingerprint(context.Context, *CreateFingerprintReq) (*CreateFingerprintRes, error)
	UpdateFingerprint(context.Context, *UpdateFingerprintReq) (*UpdateFingerprintRes, error)
	// review
	Reviews(context.Context, *ReviewsReq) (*ReviewsRes, error)
	UpdateReviewOpinion(context.Context, *UpdateReviewOpinionReq) (*UpdateReviewOpinionRes, error)
}

func RegisterImgtripServer(s *grpc.Server, srv ImgtripServer) {
	s.RegisterService(&_Imgtrip_serviceDesc, srv)
}

func _Imgtrip_Images_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).Images(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/Images",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).Images(ctx, req.(*ImagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_DownloadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).DownloadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/DownloadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).DownloadImage(ctx, req.(*DownloadImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_UpdateImageVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).UpdateImageVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/UpdateImageVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).UpdateImageVote(ctx, req.(*UpdateImageVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_UpdateImageName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).UpdateImageName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/UpdateImageName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).UpdateImageName(ctx, req.(*UpdateImageNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_CreateImageTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).CreateImageTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/CreateImageTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).CreateImageTag(ctx, req.(*CreateImageTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_DeleteImageTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).DeleteImageTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/DeleteImageTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).DeleteImageTag(ctx, req.(*DeleteImageTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_UpdateImageTagVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageTagVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).UpdateImageTagVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/UpdateImageTagVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).UpdateImageTagVote(ctx, req.(*UpdateImageTagVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_Albums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).Albums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/Albums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).Albums(ctx, req.(*AlbumsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_ShowAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowAlbumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).ShowAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/ShowAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).ShowAlbum(ctx, req.(*ShowAlbumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_AlbumImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumImagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).AlbumImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/AlbumImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).AlbumImages(ctx, req.(*AlbumImagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_CreateAlbumImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlbumImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).CreateAlbumImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/CreateAlbumImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).CreateAlbumImage(ctx, req.(*CreateAlbumImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_DeleteAlbumImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlbumImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).DeleteAlbumImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/DeleteAlbumImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).DeleteAlbumImage(ctx, req.(*DeleteAlbumImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlbumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/CreateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).CreateAlbum(ctx, req.(*CreateAlbumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_UpdateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlbumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).UpdateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/UpdateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).UpdateAlbum(ctx, req.(*UpdateAlbumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_DeleteAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlbumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).DeleteAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/DeleteAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).DeleteAlbum(ctx, req.(*DeleteAlbumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_UserAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAlbumsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).UserAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/UserAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).UserAlbums(ctx, req.(*UserAlbumsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_Posts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).Posts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/Posts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).Posts(ctx, req.(*PostsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_ShowPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).ShowPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/ShowPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).ShowPost(ctx, req.(*ShowPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_CreateZoomLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZoomLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).CreateZoomLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/CreateZoomLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).CreateZoomLog(ctx, req.(*CreateZoomLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_CreateDownloadLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDownloadLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).CreateDownloadLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/CreateDownloadLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).CreateDownloadLog(ctx, req.(*CreateDownloadLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_CreateSearchLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSearchLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).CreateSearchLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/CreateSearchLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).CreateSearchLog(ctx, req.(*CreateSearchLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_CreateErrorLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateErrorLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).CreateErrorLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/CreateErrorLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).CreateErrorLog(ctx, req.(*CreateErrorLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_AuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).AuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/AuthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).AuthToken(ctx, req.(*AuthTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).CreateToken(ctx, req.(*CreateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).UpdateToken(ctx, req.(*UpdateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/AuthUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).AuthUser(ctx, req.(*AuthUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_ShowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).ShowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/ShowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).ShowUser(ctx, req.(*ShowUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_CreateJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJwtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).CreateJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/CreateJwt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).CreateJwt(ctx, req.(*CreateJwtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_CreateVerificationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVerificationEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).CreateVerificationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/CreateVerificationEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).CreateVerificationEmail(ctx, req.(*CreateVerificationEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).UpdatePassword(ctx, req.(*UpdatePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_ImageVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageVotesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).ImageVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/ImageVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).ImageVotes(ctx, req.(*ImageVotesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_ScoreLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).ScoreLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/ScoreLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).ScoreLogs(ctx, req.(*ScoreLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_Comments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).Comments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/Comments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).Comments(ctx, req.(*CommentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).CreateComment(ctx, req.(*CreateCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).UpdateComment(ctx, req.(*UpdateCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_CreateCommentHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentHostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).CreateCommentHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/CreateCommentHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).CreateCommentHost(ctx, req.(*CreateCommentHostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_CreateFingerprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFingerprintReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).CreateFingerprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/CreateFingerprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).CreateFingerprint(ctx, req.(*CreateFingerprintReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_UpdateFingerprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFingerprintReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).UpdateFingerprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/UpdateFingerprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).UpdateFingerprint(ctx, req.(*UpdateFingerprintReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_Reviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).Reviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/Reviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).Reviews(ctx, req.(*ReviewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imgtrip_UpdateReviewOpinion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReviewOpinionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgtripServer).UpdateReviewOpinion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Imgtrip/UpdateReviewOpinion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgtripServer).UpdateReviewOpinion(ctx, req.(*UpdateReviewOpinionReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Imgtrip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Imgtrip",
	HandlerType: (*ImgtripServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Images",
			Handler:    _Imgtrip_Images_Handler,
		},
		{
			MethodName: "DownloadImage",
			Handler:    _Imgtrip_DownloadImage_Handler,
		},
		{
			MethodName: "UpdateImageVote",
			Handler:    _Imgtrip_UpdateImageVote_Handler,
		},
		{
			MethodName: "UpdateImageName",
			Handler:    _Imgtrip_UpdateImageName_Handler,
		},
		{
			MethodName: "CreateImageTag",
			Handler:    _Imgtrip_CreateImageTag_Handler,
		},
		{
			MethodName: "DeleteImageTag",
			Handler:    _Imgtrip_DeleteImageTag_Handler,
		},
		{
			MethodName: "UpdateImageTagVote",
			Handler:    _Imgtrip_UpdateImageTagVote_Handler,
		},
		{
			MethodName: "Albums",
			Handler:    _Imgtrip_Albums_Handler,
		},
		{
			MethodName: "ShowAlbum",
			Handler:    _Imgtrip_ShowAlbum_Handler,
		},
		{
			MethodName: "AlbumImages",
			Handler:    _Imgtrip_AlbumImages_Handler,
		},
		{
			MethodName: "CreateAlbumImage",
			Handler:    _Imgtrip_CreateAlbumImage_Handler,
		},
		{
			MethodName: "DeleteAlbumImage",
			Handler:    _Imgtrip_DeleteAlbumImage_Handler,
		},
		{
			MethodName: "CreateAlbum",
			Handler:    _Imgtrip_CreateAlbum_Handler,
		},
		{
			MethodName: "UpdateAlbum",
			Handler:    _Imgtrip_UpdateAlbum_Handler,
		},
		{
			MethodName: "DeleteAlbum",
			Handler:    _Imgtrip_DeleteAlbum_Handler,
		},
		{
			MethodName: "UserAlbums",
			Handler:    _Imgtrip_UserAlbums_Handler,
		},
		{
			MethodName: "Posts",
			Handler:    _Imgtrip_Posts_Handler,
		},
		{
			MethodName: "ShowPost",
			Handler:    _Imgtrip_ShowPost_Handler,
		},
		{
			MethodName: "CreateZoomLog",
			Handler:    _Imgtrip_CreateZoomLog_Handler,
		},
		{
			MethodName: "CreateDownloadLog",
			Handler:    _Imgtrip_CreateDownloadLog_Handler,
		},
		{
			MethodName: "CreateSearchLog",
			Handler:    _Imgtrip_CreateSearchLog_Handler,
		},
		{
			MethodName: "CreateErrorLog",
			Handler:    _Imgtrip_CreateErrorLog_Handler,
		},
		{
			MethodName: "AuthToken",
			Handler:    _Imgtrip_AuthToken_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _Imgtrip_CreateToken_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _Imgtrip_UpdateToken_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Imgtrip_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Imgtrip_UpdateUser_Handler,
		},
		{
			MethodName: "AuthUser",
			Handler:    _Imgtrip_AuthUser_Handler,
		},
		{
			MethodName: "ShowUser",
			Handler:    _Imgtrip_ShowUser_Handler,
		},
		{
			MethodName: "CreateJwt",
			Handler:    _Imgtrip_CreateJwt_Handler,
		},
		{
			MethodName: "CreateVerificationEmail",
			Handler:    _Imgtrip_CreateVerificationEmail_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _Imgtrip_UpdatePassword_Handler,
		},
		{
			MethodName: "ImageVotes",
			Handler:    _Imgtrip_ImageVotes_Handler,
		},
		{
			MethodName: "ScoreLogs",
			Handler:    _Imgtrip_ScoreLogs_Handler,
		},
		{
			MethodName: "Comments",
			Handler:    _Imgtrip_Comments_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _Imgtrip_CreateComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _Imgtrip_UpdateComment_Handler,
		},
		{
			MethodName: "CreateCommentHost",
			Handler:    _Imgtrip_CreateCommentHost_Handler,
		},
		{
			MethodName: "CreateFingerprint",
			Handler:    _Imgtrip_CreateFingerprint_Handler,
		},
		{
			MethodName: "UpdateFingerprint",
			Handler:    _Imgtrip_UpdateFingerprint_Handler,
		},
		{
			MethodName: "Reviews",
			Handler:    _Imgtrip_Reviews_Handler,
		},
		{
			MethodName: "UpdateReviewOpinion",
			Handler:    _Imgtrip_UpdateReviewOpinion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imgtrip.proto",
}

func init() { proto.RegisterFile("imgtrip.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2725 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x3a, 0xcd, 0x6e, 0x1b, 0xc9,
	0xd1, 0x1a, 0x92, 0xe2, 0x4f, 0x51, 0xa4, 0xe8, 0x96, 0x2c, 0x73, 0x67, 0xbd, 0xbb, 0xfa, 0x7a,
	0x3f, 0x2f, 0x14, 0x79, 0xd7, 0xd9, 0x28, 0xc6, 0x2e, 0x92, 0x4d, 0xe0, 0x55, 0x48, 0xda, 0xcb,
	0xac, 0x21, 0x19, 0x94, 0x6c, 0x23, 0x09, 0x02, 0x62, 0xc4, 0x19, 0x53, 0x03, 0x8b, 0x1c, 0x7a,
	0x7a, 0x24, 0x41, 0xe7, 0x24, 0x87, 0x1c, 0x73, 0xcb, 0x31, 0xd7, 0x9c, 0x73, 0x0d, 0x90, 0x47,
	0xc8, 0x6b, 0xe4, 0x09, 0x02, 0xe4, 0x16, 0x54, 0xff, 0xcc, 0x74, 0xcf, 0x0f, 0x25, 0x05, 0xbe,
	0x4d, 0x55, 0x57, 0x57, 0x55, 0x57, 0x57, 0x55, 0x57, 0x15, 0x09, 0x2d, 0x7f, 0x36, 0x8d, 0x42,
	0x7f, 0xf1, 0x68, 0x11, 0x06, 0x51, 0x40, 0x4a, 0x8b, 0x13, 0xfa, 0xa7, 0x12, 0xac, 0xee, 0x9f,
	0x9d, 0x9c, 0xcf, 0x48, 0x1b, 0x4a, 0xbe, 0xdb, 0xb5, 0xb6, 0xad, 0x9d, 0xca, 0xa8, 0xe4, 0xbb,
	0x64, 0x13, 0x56, 0x23, 0x3f, 0x3a, 0xf3, 0xba, 0xa5, 0x6d, 0x6b, 0xa7, 0x31, 0x12, 0x00, 0xb9,
	0x07, 0xb5, 0x73, 0xe6, 0x85, 0x63, 0xdf, 0xed, 0x96, 0x39, 0x69, 0x15, 0xc1, 0xa1, 0x4b, 0x3e,
	0x02, 0x98, 0x84, 0x9e, 0x13, 0x79, 0xee, 0xd8, 0x89, 0xba, 0x15, 0xbe, 0xa7, 0x21, 0x31, 0xfb,
	0x11, 0xb1, 0xa1, 0x3e, 0x09, 0x66, 0x33, 0x6f, 0x1e, 0xb1, 0xee, 0x2a, 0xdf, 0x18, 0xc3, 0x28,
	0xe9, 0xc2, 0xf7, 0x2e, 0x59, 0xb7, 0xca, 0x17, 0x04, 0x80, 0xd8, 0x49, 0x70, 0xe1, 0x85, 0xdd,
	0x9a, 0x90, 0xcf, 0x01, 0xd2, 0x85, 0x9a, 0x33, 0x0b, 0xce, 0x91, 0x4d, 0x9d, 0x53, 0x2b, 0x90,
	0x7c, 0x06, 0xeb, 0x92, 0xe3, 0xf8, 0x34, 0x60, 0x11, 0x6a, 0xd8, 0xe0, 0x14, 0x2d, 0x89, 0xfe,
	0x2e, 0x60, 0xd1, 0xd0, 0x25, 0xdb, 0xd0, 0x74, 0x3d, 0x36, 0x09, 0xfd, 0x45, 0xe4, 0x07, 0xf3,
	0x2e, 0x70, 0xee, 0x3a, 0x8a, 0xfe, 0xcd, 0x82, 0xd5, 0xe1, 0xcc, 0x99, 0x7a, 0x19, 0x9b, 0x10,
	0xa8, 0xcc, 0x9d, 0x99, 0x32, 0x09, 0xff, 0x26, 0x1d, 0x28, 0xb3, 0x70, 0xc2, 0xad, 0xd1, 0x18,
	0xe1, 0x27, 0xb9, 0x0f, 0x8d, 0x37, 0xce, 0x45, 0x10, 0xfa, 0x91, 0xe7, 0x72, 0x4b, 0xd4, 0x47,
	0x09, 0x02, 0x2d, 0x78, 0x11, 0x44, 0xde, 0xf8, 0x7c, 0x21, 0x0d, 0x51, 0x45, 0xf0, 0xe5, 0x82,
	0x7c, 0x08, 0x0d, 0xbe, 0xe0, 0x06, 0x97, 0x73, 0x69, 0x8a, 0x3a, 0x22, 0xfa, 0xc1, 0xe5, 0x9c,
	0x6c, 0x43, 0x25, 0x72, 0xa6, 0xac, 0x5b, 0xdb, 0x2e, 0xef, 0x34, 0xf7, 0xd6, 0x1e, 0x2d, 0x4e,
	0x1e, 0x71, 0x15, 0x8f, 0x9d, 0xe9, 0x88, 0xaf, 0xd0, 0xdf, 0x5b, 0x50, 0x57, 0xa8, 0x1b, 0x29,
	0xae, 0x29, 0x52, 0x36, 0x14, 0xf9, 0x00, 0xea, 0x3e, 0x1b, 0x23, 0xa0, 0xd4, 0xaf, 0xf9, 0xec,
	0x15, 0x82, 0x64, 0x1b, 0xd6, 0x7c, 0x94, 0x31, 0x8e, 0x9c, 0x29, 0x5a, 0x58, 0x9c, 0x00, 0x7c,
	0x29, 0x77, 0xe8, 0xd2, 0x7f, 0x59, 0x50, 0x79, 0x11, 0xb0, 0xe8, 0x86, 0xfe, 0x44, 0xa0, 0x72,
	0x12, 0xb8, 0x57, 0xd2, 0x7c, 0xfc, 0x5b, 0xf7, 0xb1, 0xca, 0x12, 0x1f, 0x5b, 0x5d, 0xe6, 0x63,
	0xd5, 0x22, 0x1f, 0xab, 0xe5, 0xfa, 0x58, 0x5d, 0xf7, 0xb1, 0x1b, 0x7a, 0x12, 0xfd, 0xa3, 0x05,
	0x0d, 0x6e, 0x71, 0x36, 0xf2, 0xde, 0x21, 0x2f, 0x16, 0x39, 0x61, 0x24, 0x8f, 0x2c, 0x00, 0xc4,
	0x9e, 0xf9, 0x33, 0x3f, 0xe2, 0xa7, 0xae, 0x8c, 0x04, 0x40, 0x28, 0x54, 0x58, 0x10, 0x46, 0xfc,
	0xd4, 0xed, 0xbd, 0x76, 0x7c, 0x9b, 0x47, 0x41, 0x18, 0xb1, 0x11, 0x5f, 0x23, 0x5b, 0x50, 0x0d,
	0x9d, 0xb9, 0x1b, 0xcc, 0xe4, 0x1d, 0x48, 0x88, 0xdb, 0x31, 0x88, 0x9c, 0x33, 0x7e, 0xfe, 0xfa,
	0x48, 0x00, 0xf4, 0x17, 0x89, 0x2a, 0x8c, 0x7c, 0x02, 0xab, 0x7e, 0xe4, 0xcd, 0x58, 0xd7, 0xe2,
	0xde, 0xd2, 0x88, 0xf9, 0x8f, 0x04, 0x3e, 0xe1, 0x21, 0xb5, 0x12, 0x3c, 0xbe, 0x80, 0x0e, 0xfa,
	0xda, 0x59, 0xe0, 0xb8, 0x82, 0xda, 0x7b, 0xc7, 0x7d, 0x81, 0x5f, 0x78, 0x7c, 0x97, 0x35, 0x0e,
	0x0f, 0x5d, 0xba, 0x9b, 0x21, 0x67, 0xa8, 0x34, 0x8b, 0x9c, 0xe8, 0x9c, 0x71, 0xe2, 0xfa, 0x48,
	0x42, 0xb4, 0x07, 0xe4, 0xe5, 0xc2, 0x75, 0x22, 0x8f, 0x53, 0xa2, 0x2f, 0x2d, 0x67, 0x8e, 0x7e,
	0x81, 0x0e, 0xc8, 0x15, 0x2c, 0x8f, 0xf8, 0x37, 0xdd, 0xcc, 0x61, 0x92, 0x66, 0x7d, 0xe0, 0xcc,
	0x6e, 0xc0, 0x3a, 0x1d, 0x0b, 0x29, 0xd6, 0x82, 0x09, 0xa3, 0xdf, 0xc2, 0x9d, 0x1e, 0xf7, 0xae,
	0x38, 0xd4, 0x96, 0x73, 0xee, 0x40, 0x39, 0x72, 0xa6, 0x92, 0x31, 0x7e, 0xd2, 0x8d, 0x2c, 0x07,
	0x46, 0x07, 0x70, 0xa7, 0xef, 0x9d, 0x79, 0x37, 0x66, 0x7b, 0x17, 0xaa, 0x32, 0xdc, 0xd4, 0x75,
	0xf1, 0x48, 0xdb, 0xc8, 0xb2, 0x61, 0xf4, 0xb7, 0x70, 0x57, 0x3b, 0xc8, 0xb1, 0x33, 0xbd, 0xa5,
	0xad, 0x2b, 0xc2, 0xd6, 0x9a, 0xcc, 0xb2, 0x2e, 0xf3, 0x5e, 0x3e, 0x7b, 0x46, 0x27, 0xd0, 0xe0,
	0xcf, 0xc8, 0xad, 0x43, 0x61, 0x13, 0x56, 0x83, 0xd0, 0xf5, 0x42, 0x25, 0x87, 0x03, 0xc5, 0x4e,
	0xae, 0x84, 0xe4, 0x3b, 0x39, 0x5f, 0x5d, 0xee, 0xe4, 0xbf, 0xb3, 0xa0, 0xcd, 0xc9, 0x6e, 0x15,
	0xb9, 0xe5, 0xe5, 0xea, 0x7e, 0x00, 0x75, 0x07, 0x79, 0x26, 0x29, 0xab, 0xc6, 0xe1, 0xa1, 0x5b,
	0x70, 0x92, 0x67, 0x29, 0x25, 0xfe, 0xe7, 0x98, 0xfd, 0x18, 0xd6, 0x8e, 0x4e, 0x83, 0x4b, 0x71,
	0x70, 0xef, 0x1d, 0x66, 0xdd, 0x61, 0x9c, 0x75, 0x87, 0x2e, 0xfd, 0xa1, 0xb1, 0xce, 0xc5, 0x70,
	0xcd, 0x38, 0x89, 0x69, 0x35, 0x8e, 0xa7, 0x4f, 0xa0, 0x2d, 0x3c, 0x36, 0x66, 0x19, 0x27, 0x6e,
	0xab, 0xa0, 0x10, 0x28, 0xe9, 0x49, 0x9a, 0x6e, 0xa7, 0x18, 0xb0, 0xf4, 0x4b, 0x40, 0xff, 0x62,
	0x41, 0x5b, 0x78, 0x91, 0xae, 0xf6, 0x0d, 0x1e, 0x0b, 0x3d, 0xc1, 0x97, 0x8b, 0x12, 0x7c, 0x25,
	0x37, 0xc1, 0xaf, 0xea, 0x09, 0x3e, 0x55, 0x02, 0x54, 0xb3, 0x25, 0x40, 0x27, 0xa5, 0x21, 0xa3,
	0xdf, 0xc3, 0x86, 0x76, 0x2c, 0x3d, 0x3f, 0xc6, 0x37, 0x6f, 0x99, 0x37, 0xaf, 0x47, 0x5c, 0xc9,
	0x4c, 0x9d, 0x77, 0xf3, 0x98, 0x71, 0x19, 0x22, 0xa2, 0xdf, 0x93, 0x8c, 0x2c, 0x33, 0x86, 0xd7,
	0xa3, 0xa1, 0x73, 0x6c, 0x8f, 0x67, 0x37, 0x28, 0x18, 0xdd, 0x81, 0xd6, 0x4b, 0xe6, 0x85, 0x49,
	0x80, 0x6b, 0x97, 0x6f, 0x19, 0x97, 0xff, 0xa5, 0x49, 0x79, 0x7d, 0x94, 0xd2, 0xaf, 0xa0, 0x8e,
	0xe5, 0xc2, 0x6d, 0xf3, 0x06, 0xdd, 0x8d, 0xf7, 0x31, 0xf2, 0xb1, 0x29, 0xa4, 0x8e, 0x42, 0x70,
	0x51, 0xc9, 0xf8, 0x08, 0x9a, 0x18, 0x04, 0x1c, 0x95, 0x73, 0xe0, 0x87, 0xfa, 0x32, 0x23, 0xf7,
	0xa1, 0xb2, 0x08, 0x58, 0x24, 0x23, 0x24, 0x61, 0xc6, 0xb1, 0xf4, 0x10, 0x3a, 0xe2, 0xea, 0x7e,
	0x1d, 0x04, 0xb3, 0xe7, 0x01, 0xcf, 0xdd, 0xdb, 0xd0, 0x7c, 0xe3, 0xcf, 0xa7, 0x5e, 0xb8, 0x08,
	0xfd, 0x79, 0x24, 0xe3, 0x44, 0x47, 0x2d, 0xbb, 0x27, 0x92, 0x61, 0xc8, 0xe8, 0x11, 0x6c, 0x0a,
	0x9c, 0x7a, 0x60, 0xdf, 0x87, 0xa0, 0xad, 0x5c, 0xa6, 0x8c, 0xbe, 0x00, 0x22, 0xf0, 0x47, 0x9e,
	0x13, 0x4e, 0x4e, 0x6f, 0x2c, 0xaa, 0x0b, 0xb5, 0xb7, 0xde, 0xd5, 0x65, 0x10, 0xc6, 0x92, 0x24,
	0x88, 0xaf, 0x69, 0x86, 0x23, 0xa3, 0xff, 0xb0, 0xd4, 0x63, 0x38, 0x08, 0xc3, 0x20, 0x94, 0x72,
	0x08, 0x54, 0x26, 0x81, 0xeb, 0xc9, 0xeb, 0xe0, 0xdf, 0xc8, 0x79, 0xe6, 0x31, 0xe6, 0x4c, 0x55,
	0xfc, 0x2b, 0x10, 0x5f, 0xd8, 0xf3, 0xf0, 0x4c, 0x15, 0xdb, 0xe7, 0xe1, 0x19, 0xd2, 0x2e, 0x9c,
	0x2b, 0x3c, 0x8e, 0x6c, 0x3a, 0x14, 0x88, 0x27, 0xf0, 0xe6, 0x17, 0x7e, 0x18, 0xcc, 0x31, 0x43,
	0xc8, 0x0c, 0xa0, 0xa3, 0xb0, 0x5a, 0x39, 0xf5, 0x1c, 0xcc, 0xe6, 0x22, 0x05, 0x48, 0x08, 0xf1,
	0x93, 0x20, 0x78, 0xeb, 0x7b, 0xb2, 0xf7, 0x90, 0x50, 0xf2, 0x9a, 0x27, 0x07, 0x60, 0xf4, 0x9f,
	0x16, 0x54, 0xd0, 0xe7, 0x6f, 0x54, 0x73, 0x2f, 0x79, 0x28, 0xb6, 0xa0, 0xea, 0x5c, 0x38, 0x91,
	0xa3, 0x72, 0x95, 0x84, 0x52, 0x45, 0x6f, 0x35, 0x5d, 0xf4, 0x62, 0xcc, 0x4c, 0x82, 0xd0, 0x53,
	0x85, 0x2d, 0x07, 0xc8, 0x37, 0x60, 0xbb, 0x8e, 0x7f, 0x76, 0x35, 0x7e, 0x13, 0x7a, 0xa2, 0xa3,
	0x40, 0x93, 0x8c, 0xe7, 0xe7, 0xb3, 0x13, 0x59, 0xed, 0x56, 0x46, 0xf7, 0x38, 0xc5, 0xd3, 0xd0,
	0x8b, 0x1d, 0xe2, 0x80, 0x2f, 0xd3, 0x3f, 0x5b, 0x50, 0xeb, 0x89, 0xbc, 0x9a, 0x39, 0x54, 0x4e,
	0x6d, 0x5c, 0xca, 0xeb, 0xb2, 0xba, 0x50, 0x9b, 0x04, 0xf3, 0x08, 0x0d, 0x2f, 0x2e, 0x4b, 0x81,
	0xd7, 0x35, 0x8a, 0xf7, 0xa1, 0x82, 0xb9, 0x84, 0x1b, 0x41, 0x46, 0x1f, 0x5a, 0x77, 0xc4, 0xb1,
	0xf4, 0x07, 0xea, 0x71, 0x39, 0x0e, 0xde, 0x7a, 0xf3, 0xa5, 0xa9, 0xe8, 0x49, 0x8a, 0x54, 0xbe,
	0xa0, 0x6f, 0xbd, 0x79, 0xfc, 0x90, 0x21, 0x50, 0xfc, 0x90, 0xfd, 0x3f, 0xac, 0xed, 0x9f, 0x47,
	0xa7, 0xb1, 0xa4, 0xdc, 0xed, 0xf4, 0x73, 0x83, 0x8a, 0xc5, 0xfa, 0x5b, 0x45, 0xfa, 0x8b, 0x77,
	0xe5, 0x7a, 0xfd, 0x3b, 0x29, 0x52, 0x86, 0x6f, 0xbd, 0x38, 0xd1, 0x2f, 0x2f, 0x73, 0xf3, 0x18,
	0x35, 0xd6, 0x19, 0x3a, 0xe0, 0xa9, 0xc3, 0x4e, 0xa5, 0xbe, 0xfc, 0x9b, 0xee, 0x81, 0x2d, 0x68,
	0x5e, 0x79, 0xa1, 0xff, 0xc6, 0x9f, 0x38, 0xf8, 0xdc, 0x0d, 0x66, 0x8e, 0x7f, 0x26, 0x8f, 0xe8,
	0xe1, 0xb7, 0x3a, 0x22, 0x07, 0xe8, 0xfd, 0x25, 0x7b, 0x18, 0xfd, 0xab, 0x05, 0x2d, 0xb1, 0xcc,
	0xcf, 0x29, 0x42, 0x9a, 0x3b, 0xbe, 0xa5, 0x39, 0x7e, 0xcc, 0xb9, 0xa4, 0x71, 0xc6, 0x07, 0x7d,
	0xe1, 0x30, 0xc6, 0x73, 0x88, 0x70, 0x93, 0x18, 0x26, 0x0f, 0xe1, 0xce, 0x85, 0x26, 0x6f, 0xcc,
	0xb3, 0x84, 0x70, 0x97, 0x8e, 0xbe, 0xd0, 0xc3, 0x8c, 0xf1, 0x00, 0xda, 0xa1, 0xf7, 0xc6, 0x0b,
	0x43, 0x2f, 0x1c, 0x0b, 0x39, 0x22, 0x88, 0x5a, 0x0a, 0xcb, 0xd5, 0xa5, 0x5f, 0x98, 0xaa, 0x26,
	0xb7, 0x55, 0xca, 0xbd, 0xad, 0xaf, 0xa1, 0x25, 0xae, 0x40, 0x9d, 0x2c, 0x1d, 0x0d, 0x49, 0xcc,
	0x96, 0xf4, 0x98, 0x45, 0x39, 0xfa, 0xc6, 0xeb, 0xbc, 0x22, 0x84, 0x3b, 0x82, 0xfc, 0x85, 0x3c,
	0x7c, 0xe1, 0x5d, 0xe4, 0x5b, 0xa5, 0x54, 0x60, 0x95, 0x25, 0xe6, 0xc5, 0x5c, 0x96, 0x96, 0xc9,
	0xe8, 0x13, 0x68, 0xa2, 0x33, 0xab, 0xe3, 0xe6, 0xab, 0xa0, 0x73, 0x2d, 0xa5, 0xb8, 0x3e, 0xd4,
	0x19, 0x5c, 0x77, 0x6c, 0xf9, 0x2c, 0x17, 0x18, 0x57, 0x3d, 0xcb, 0x37, 0xe3, 0xf5, 0x53, 0xd9,
	0xff, 0x62, 0x3f, 0x72, 0xdb, 0xbe, 0x72, 0x1d, 0x5a, 0xf1, 0x5e, 0xac, 0x43, 0xe8, 0x63, 0x13,
	0xc1, 0xc8, 0xa7, 0x66, 0x81, 0xd1, 0x8a, 0x8b, 0x73, 0xde, 0xfe, 0xc8, 0x2a, 0xe3, 0xef, 0x16,
	0xd4, 0x8f, 0x30, 0xfb, 0x3e, 0x0f, 0xa6, 0xcb, 0xb5, 0x4d, 0x92, 0xb6, 0xec, 0x2d, 0x44, 0xd2,
	0x4e, 0x95, 0xa5, 0xe5, 0x4c, 0x59, 0x4a, 0x3e, 0x85, 0xd6, 0xc4, 0x89, 0xbc, 0x69, 0x10, 0x5e,
	0x8d, 0x79, 0x88, 0x89, 0x78, 0x58, 0x53, 0x48, 0x6c, 0x5c, 0x79, 0x0f, 0x7e, 0x35, 0x3b, 0x09,
	0x54, 0x0c, 0x48, 0xe8, 0x9a, 0x87, 0x84, 0xfe, 0xc1, 0x82, 0x35, 0xa5, 0x3e, 0xaf, 0xc6, 0x76,
	0x54, 0xab, 0x63, 0xf1, 0x29, 0x05, 0xc1, 0x33, 0x28, 0x82, 0x43, 0x5c, 0x60, 0xaa, 0xfd, 0xf9,
	0x04, 0x9a, 0xb1, 0x5a, 0x71, 0x1a, 0x05, 0x85, 0x12, 0x4d, 0x90, 0x28, 0xec, 0xca, 0xb9, 0x85,
	0x5d, 0x45, 0x2f, 0xec, 0xf6, 0x0c, 0x35, 0x18, 0xa1, 0xa6, 0xed, 0xd7, 0x74, 0x35, 0x94, 0xe9,
	0x2f, 0xa1, 0x29, 0x1f, 0xac, 0xf7, 0xd4, 0x7f, 0xe6, 0x3c, 0x73, 0x95, 0xbc, 0x11, 0xd0, 0x97,
	0xba, 0x60, 0x46, 0xfe, 0xcf, 0xd4, 0xb5, 0x89, 0xba, 0xca, 0x75, 0xa5, 0xea, 0xb1, 0x2a, 0xf7,
	0x14, 0xde, 0x7b, 0x97, 0x27, 0xcd, 0xba, 0xd5, 0xa3, 0x4a, 0x7f, 0x92, 0xe1, 0xca, 0xc8, 0x03,
	0xa4, 0xe6, 0x90, 0xf4, 0x42, 0x43, 0x1d, 0xb5, 0x46, 0x7f, 0x06, 0x1d, 0x91, 0x08, 0x34, 0x85,
	0xd2, 0x79, 0x4e, 0x13, 0x5c, 0x32, 0x05, 0x93, 0xcc, 0x6e, 0x96, 0x14, 0x9a, 0xbd, 0x44, 0x7b,
	0x0c, 0xab, 0xcf, 0x72, 0xf1, 0xd9, 0xfe, 0x70, 0x57, 0xd1, 0x3d, 0x4d, 0xaa, 0x4d, 0xf9, 0xae,
	0x64, 0xde, 0xb3, 0x5e, 0x2e, 0x6d, 0xee, 0xdb, 0x57, 0xfc, 0xd2, 0xf7, 0x60, 0x53, 0x1c, 0xe2,
	0x7a, 0x81, 0xc5, 0x4c, 0xb6, 0x72, 0x99, 0x30, 0xfa, 0x18, 0xda, 0x23, 0x0f, 0xbb, 0xd1, 0x9e,
	0x8c, 0x87, 0x9b, 0x14, 0x8a, 0xf4, 0x3f, 0x65, 0xa8, 0x8a, 0x6d, 0x19, 0xf2, 0xe2, 0x12, 0x3f,
	0x0e, 0xf1, 0x40, 0x1b, 0xd0, 0x37, 0x24, 0x66, 0xe8, 0x92, 0xcf, 0x81, 0x84, 0x9c, 0xe7, 0x58,
	0x0f, 0x57, 0xe1, 0xd8, 0x9d, 0xd0, 0x50, 0x72, 0xe8, 0x62, 0x54, 0x3b, 0x53, 0x2c, 0x1f, 0x27,
	0xc1, 0xb9, 0xac, 0x9f, 0x2b, 0x23, 0xe0, 0xa8, 0x1e, 0x62, 0xf0, 0xd1, 0x75, 0x7d, 0xa6, 0xd3,
	0x88, 0xa9, 0x6b, 0x4b, 0x61, 0x05, 0xd9, 0x5d, 0xa8, 0x7a, 0x73, 0x9e, 0x73, 0xe4, 0x24, 0xdf,
	0x9b, 0x63, 0xa1, 0x67, 0xa6, 0xa3, 0x7a, 0xba, 0x0e, 0xfc, 0x08, 0xe0, 0x9c, 0x9b, 0x93, 0x2f,
	0x37, 0xc4, 0xb2, 0xc4, 0xec, 0x47, 0xe4, 0x1b, 0x58, 0x4f, 0x1d, 0x85, 0x4f, 0xf2, 0x9b, 0x22,
	0x4d, 0x99, 0x06, 0x1f, 0xb5, 0xcd, 0xb3, 0xc5, 0xc9, 0xb9, 0x99, 0x9b, 0x9c, 0xb1, 0x65, 0x45,
	0x7b, 0x76, 0xd7, 0x92, 0x11, 0x89, 0x9a, 0xc4, 0xf0, 0x5f, 0x05, 0xb0, 0x3d, 0x38, 0x0b, 0x98,
	0xe7, 0x76, 0x5b, 0x62, 0xc8, 0x29, 0x20, 0xf2, 0x39, 0xd4, 0x82, 0x85, 0x3f, 0xc7, 0xdc, 0xdd,
	0x4e, 0x52, 0xa6, 0xd0, 0xe5, 0x50, 0x2c, 0xb0, 0x91, 0x22, 0xd1, 0x63, 0x6a, 0xdd, 0x8c, 0xa9,
	0x0b, 0x00, 0xb1, 0xe9, 0xd6, 0xc9, 0xec, 0x33, 0x3d, 0x99, 0xb5, 0xf7, 0x3a, 0x89, 0x7c, 0xc6,
	0x33, 0x76, 0x66, 0xbc, 0x56, 0xd1, 0x87, 0x52, 0x7d, 0x4d, 0x2e, 0x23, 0xdb, 0x66, 0x2e, 0x83,
	0x84, 0xd7, 0xf2, 0x89, 0xd4, 0x04, 0xb6, 0x44, 0x1c, 0x18, 0x07, 0xc7, 0x93, 0x7c, 0x08, 0x0d,
	0x79, 0x67, 0xb1, 0x3f, 0xd7, 0x05, 0x62, 0x68, 0x18, 0xaf, 0x74, 0xad, 0xf1, 0x68, 0xb7, 0x40,
	0x08, 0xdb, 0x7d, 0x00, 0x90, 0x8c, 0xd2, 0x09, 0x40, 0x75, 0xd8, 0x1f, 0xef, 0x1f, 0xf5, 0x3a,
	0x2b, 0xa4, 0x09, 0xb5, 0x61, 0x7f, 0xdc, 0x1f, 0x1c, 0xf5, 0x3a, 0xd6, 0x2e, 0x85, 0xb6, 0xf9,
	0x96, 0x91, 0x1a, 0x94, 0x0f, 0x06, 0xaf, 0x3b, 0x2b, 0xf8, 0x71, 0xf8, 0xbc, 0xdf, 0xb1, 0x76,
	0xbf, 0x52, 0x91, 0xab, 0xe4, 0x23, 0x8b, 0x97, 0x07, 0xdf, 0x1f, 0x1c, 0xbe, 0x3e, 0xe8, 0xac,
	0x90, 0x06, 0xac, 0xee, 0x3f, 0x1b, 0x0d, 0x06, 0x1d, 0x8b, 0xac, 0x41, 0xbd, 0x3f, 0x3c, 0x12,
	0x50, 0x69, 0xf7, 0x14, 0xd6, 0x74, 0xa3, 0xa3, 0x12, 0x2f, 0x5f, 0xf4, 0xf7, 0x8f, 0x07, 0x9d,
	0x15, 0xfc, 0xee, 0x8d, 0x06, 0xf8, 0x6d, 0xe1, 0xf7, 0xe0, 0xa0, 0x3f, 0x3c, 0x78, 0xd6, 0x29,
	0x91, 0x0d, 0x58, 0xe7, 0xf8, 0xc3, 0xd1, 0xf8, 0xbb, 0xe1, 0xd1, 0xf1, 0xe1, 0xe8, 0x57, 0x9d,
	0x32, 0xd9, 0x84, 0xce, 0x68, 0xf0, 0x6a, 0x38, 0x78, 0x3d, 0x48, 0xb0, 0x15, 0x94, 0x3b, 0x38,
	0xe8, 0x0f, 0xfa, 0x9d, 0xd5, 0xbd, 0x7f, 0x6f, 0x40, 0x6d, 0x28, 0x7e, 0xd3, 0x23, 0x3b, 0x50,
	0x15, 0xd3, 0x44, 0x92, 0x94, 0x27, 0xe8, 0x40, 0xb6, 0x01, 0x32, 0xba, 0x42, 0x7e, 0x0e, 0x2d,
	0x63, 0x70, 0x4f, 0x36, 0x91, 0x22, 0x3d, 0xfa, 0xb7, 0xf3, 0xb0, 0xb8, 0xbd, 0x07, 0xeb, 0xa9,
	0x31, 0x3c, 0xd9, 0xe2, 0x21, 0x94, 0x19, 0xf0, 0xdb, 0xf9, 0xf8, 0x2c, 0x13, 0x51, 0xb7, 0xa4,
	0x88, 0xe5, 0x28, 0xdf, 0xce, 0xc7, 0x23, 0x93, 0x6f, 0x55, 0x8b, 0x17, 0xff, 0xee, 0x75, 0x97,
	0x3f, 0x71, 0xe9, 0x99, 0xbd, 0x9d, 0x8b, 0x96, 0x1c, 0xcc, 0x19, 0xba, 0xe0, 0x90, 0x19, 0xcf,
	0xdb, 0xb9, 0x68, 0xe4, 0xf0, 0xdc, 0xf8, 0xe5, 0x40, 0x4e, 0xc4, 0xc9, 0x07, 0x29, 0x9d, 0x93,
	0x41, 0xbc, 0x5d, 0xb8, 0x84, 0xdc, 0x76, 0xa0, 0x2a, 0x66, 0x67, 0xe2, 0x12, 0xe3, 0x89, 0x9b,
	0x6d, 0x80, 0x48, 0xf9, 0x23, 0x68, 0xc4, 0x83, 0x5d, 0xc2, 0x03, 0x5d, 0x9f, 0x03, 0xdb, 0x69,
	0x0c, 0x6e, 0xf9, 0x1a, 0x9a, 0xda, 0xd0, 0x99, 0x90, 0x98, 0x65, 0xe2, 0x2b, 0x59, 0x1c, 0x6e,
	0x7c, 0xaa, 0xaa, 0x8b, 0x64, 0x85, 0xdc, 0x4b, 0x4c, 0x6a, 0x4c, 0x2b, 0xed, 0x82, 0x05, 0xc9,
	0x27, 0x3d, 0x92, 0x14, 0x7c, 0x72, 0xa6, 0x9e, 0x76, 0xc1, 0x82, 0x3c, 0x88, 0x26, 0x40, 0x1c,
	0xc4, 0x1c, 0x5a, 0xdb, 0x59, 0x9c, 0xdc, 0xa8, 0x8d, 0x75, 0xc5, 0x46, 0x73, 0x12, 0x6d, 0x67,
	0x71, 0x72, 0xa3, 0xa6, 0x8a, 0xd8, 0x68, 0x8e, 0x51, 0xed, 0x2c, 0x0e, 0x37, 0x3e, 0x06, 0x48,
	0x06, 0xa2, 0xe4, 0x8e, 0x7a, 0x6a, 0x92, 0x8b, 0xcd, 0xa0, 0x70, 0xd7, 0x03, 0x58, 0xe5, 0xc3,
	0x4d, 0xb2, 0xa6, 0xa6, 0x8f, 0x9c, 0x56, 0x87, 0x90, 0xec, 0x11, 0xd4, 0xd5, 0xe0, 0x92, 0xac,
	0xab, 0x0b, 0x97, 0x53, 0x4e, 0x3b, 0x85, 0x90, 0x81, 0x6f, 0x8c, 0x1a, 0x45, 0xe0, 0xa7, 0xc7,
	0x99, 0x76, 0x1e, 0x16, 0xb7, 0x0f, 0xd5, 0xf8, 0x4b, 0x1b, 0x20, 0x92, 0x6e, 0x42, 0x6c, 0x0e,
	0x2b, 0xed, 0xa2, 0x15, 0x19, 0xfe, 0xa9, 0x09, 0xa1, 0x08, 0xff, 0xec, 0x20, 0xd2, 0xce, 0xc7,
	0x1b, 0xe1, 0xaf, 0xc6, 0x71, 0x7a, 0xf8, 0x6b, 0x33, 0x46, 0x3b, 0x17, 0x2d, 0x83, 0x28, 0x1e,
	0xde, 0x88, 0x20, 0xd2, 0x27, 0x3e, 0x76, 0x1a, 0x63, 0xf8, 0x9e, 0xd8, 0xa4, 0xf9, 0x59, 0xbc,
	0x2d, 0x8b, 0x33, 0x7c, 0x4f, 0xdb, 0x68, 0xce, 0x82, 0xec, 0x2c, 0x4e, 0xba, 0x50, 0x32, 0xb4,
	0x10, 0x2e, 0x64, 0xcc, 0x5b, 0xec, 0x0c, 0x4a, 0x39, 0x5e, 0x3c, 0x82, 0x90, 0x8e, 0xa7, 0xcf,
	0x32, 0xec, 0x0c, 0x4a, 0x7a, 0x94, 0xea, 0xdf, 0x85, 0x47, 0x69, 0xe3, 0x00, 0x3b, 0x85, 0xd0,
	0x3c, 0x30, 0xa1, 0xd7, 0x1a, 0x7a, 0x3b, 0x85, 0x90, 0x06, 0x8f, 0x47, 0x54, 0xc2, 0xe0, 0xfa,
	0x44, 0xcb, 0x4e, 0x63, 0x70, 0xcb, 0x6f, 0xe0, 0x5e, 0xc1, 0xf4, 0x89, 0x7c, 0x9c, 0x90, 0xe7,
	0x8d, 0xb3, 0xec, 0xe5, 0xeb, 0xd2, 0x85, 0xcc, 0x29, 0x88, 0x70, 0xa1, 0xcc, 0x34, 0xc6, 0xce,
	0x45, 0x4b, 0x3b, 0x27, 0xb3, 0x02, 0x61, 0x67, 0x63, 0x98, 0x60, 0x67, 0x50, 0x2a, 0x7b, 0xab,
	0x26, 0x57, 0x66, 0x6f, 0xad, 0xf5, 0xb6, 0xd3, 0x18, 0x69, 0x6a, 0xd5, 0x6a, 0x0a, 0x53, 0x6b,
	0x1d, 0xaf, 0x9d, 0x42, 0x18, 0xc1, 0xae, 0x46, 0xb9, 0x5a, 0x58, 0x27, 0xad, 0x9e, 0x9d, 0x87,
	0x95, 0xdb, 0x8d, 0xc6, 0x4e, 0x6c, 0x4f, 0x77, 0x8a, 0x76, 0x1e, 0xd6, 0xc8, 0x15, 0x5a, 0xaf,
	0xa7, 0xe7, 0x0a, 0xb3, 0x35, 0xb4, 0x8b, 0x56, 0x0c, 0x56, 0x4f, 0xf5, 0x1f, 0x1f, 0x92, 0x0d,
	0x66, 0xd3, 0x66, 0x17, 0xad, 0x48, 0x56, 0x99, 0x1e, 0x4d, 0xb0, 0xca, 0xeb, 0xff, 0xec, 0xa2,
	0x15, 0x64, 0xf5, 0x10, 0x6a, 0xb2, 0xc8, 0x23, 0x6d, 0xad, 0xcc, 0xc6, 0x6d, 0x26, 0x8c, 0xc4,
	0x87, 0xb0, 0x91, 0x53, 0xae, 0x12, 0x3b, 0xe1, 0x9f, 0x2e, 0x96, 0xed, 0xe2, 0x35, 0x46, 0x57,
	0x4e, 0xaa, 0xfc, 0x1f, 0x5c, 0x3f, 0xfe, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xa1, 0xb7,
	0xcd, 0xd2, 0x25, 0x00, 0x00,
}
